<?xml version="1.0" encoding="UTF-8"?>
<!-- ****************************************************************************************************-->
<!--                                     caCORE ToolKit ANT Build Script					                 -->
<!-- ****************************************************************************************************-->
<project name="caCORE Toolkit" default="all" basedir=".">
	<property file="conf/core-deploy.properties"/>
	<property file="conf/download.properties"/>
	<property environment="env" />
	<property name="temp.dir" value="output/temp"/>
	<property name="src.temp.dir" value="output/src/temp"/>
	<property name="conf.dir" value="conf"/>
	<property name="lib.dir" value="lib"/>
	<property name="demo.dir" value="demo"/>
	<property name="document.dir" value="documents"/>
	<property name="zips.dir" value="output/zipdir"/>
	<property name="data_dump_dir" value="C:/antscripttest/mysql/bin/datadump"/>
	<property name="target.dir" value="output/target"/>
	<property name="build.classes.dir" value="output/build/classes"/>
	<property name="src.java.dir" value="src"/>
	<property name="cabio.model.src.dir" value="output/${project_name}/java/gov/nih/nci/cabio"/>
	<property name="cadsr.model.src.dir" value="output/${project_name}/java/gov/nih/nci/cadsr"/>
	<property name="common.model.src.dir" value="output/${project_name}/java/gov/nih/nci/common"/>
	<property name="camod.model.src.dir" value="output/${project_name}/java/gov/nih/nci/camod"/>
	<property name="packing.dir" value="${basedir}/output/package"/>
	<property name="codegensrc.java.dir" value="src/gov/nih/nci/codegen"/>
	<property name="output.dir" value="output/${project_name}"/>
	<property name="orm.output.dir" value="output/${project_name}/orm/hibernate/"/>
	<property name="castormapping.output.dir" value="output/${project_name}/castormapping/"/>
	<property name="schema.output.dir" value="output/${project_name}/schemas/"/>
	<property name="properties.dir" value="output/${project_name}/conf"/>
	<property name="javajet.dir" value="output/${project_name}/templates/jet"/>
	<property name="model.eap.dir" value="models"/>
	<property name="model.dir" value="models/xmi"/>
	<property name="model.src.dir" value="output/${project_name}/java"/>
	<property name="model.build.dir" value="output/${project_name}/classes"/>
	<property name="model.client.build.dir" value="output/${project_name}/client"/>
	<patternset id="gen.ct.jars">
		<include name="freemarker.jar"/>
		<include name="jmi.jar"/>
		<include name="jmiutils.jar"/>
		<include name="mdrapi.jar"/>
		<include name="mof.jar"/>
		<include name="nbmdr.jar"/>
		<include name="openide-util.jar"/>
		<include name="log4j-1.2.8.jar"/>
		<include name="xml-apis.jar"/>
		<include name="jdom.jar"/>
		<include name="jakarta-oro-2.0.8.jar"/>
		<include name="jaxen-jdom.jar"/>
		<include name="jaxen-core.jar"/>
		<include name="saxpath.jar"/>
		<include name="uml-1.3.jar"/>
	</patternset>
	<!-- ************************************************************************************************-->
	<!--                          Download and Install Projects and Libraries                            -->
	<!-- ************************************************************************************************-->
	<import file="install-lib.xml"/>
	<!-- ************************************************************************************************-->
	<!--                                         ALL Target                                              -->
	<!-- ************************************************************************************************-->
	<target name="all">
		<echo>*******************************</echo>
		<echo>**Usage: ant [target]        **</echo>
		<echo>*******************************</echo>
		<echo>ant deploy - Download libraries, build project and deploy project</echo>
		<echo>ant pack-application - build project and pack war file</echo>
		<echo>ant generate-beans - generate user defined beans</echo>
		<echo>ant download-libs - download all necessary Java libraries</echo>
	</target>


	<!-- ************************************************************************************************-->
	<!--                                      Initialize Project                                         -->
	<!-- ************************************************************************************************-->
	<target name="init-project">
        <tstamp>
          <format property="buildtime"
               pattern="MM-dd-yyyy HH:mm:ss" />
     	</tstamp>
     	<echo>Starting build for ${ant.project.name} project...</echo>
     	<echo>Time: ${buildtime} </echo>
     	<echo>Java Version: ${java.runtime.version} </echo>
     	<echo>OS: ${os.name}</echo>
     	<echo>OS Arch: ${os.arch}</echo>
     	<echo>User: ${user.name}</echo>
     	<echo>Basedir: ${basedir}</echo>

		<mkdir dir="output"/>
		<mkdir dir="output/${project_name}"/>
		<mkdir dir="output/${project_name}/conf"/>
		<mkdir dir="output/${project_name}/templates/jet"/>
		<mkdir dir="output/${project_name}/java"/>
		<mkdir dir="output/${project_name}/classes"/>
		<mkdir dir="output/${project_name}/client"/>
		<mkdir dir="output/${project_name}/castormapping"/>
		<mkdir dir="output/${project_name}/schemas"/>
		<condition property="create_cache_yes">
			<istrue value="${create_cache}"/>
		</condition>
		
		<condition property="show_sql_yes">
			<istrue value="${show_sql}"/>
		</condition>

		<copy todir="output/${project_name}/conf" overwrite="true">
			<fileset dir="${conf.dir}">
				<include name="beanimplgeneration.xml"/>
				<include name="beanwsgeneration.xml"/>
				<include name="beanwsimplgeneration.xml"/>
				<include name="beangeneration.xml"/>
				<include name="beanevsgeneration.xml"/>
				<include name="beanevswsgeneration.xml"/>
			</fileset>
			<fileset dir="${conf.dir}">
				<include name="license.txt"/>
			</fileset>
			<filterset>

				<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
				<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
				<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
				<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
				<filter token="OUTPUTDIR" value="${model.src.dir}"/>
				<filter token="EVS_MODEL" value="${model.dir}/fixed_${evs_model}"/>
			</filterset>
		</copy>
		<copy todir="output/${project_name}/conf" overwrite="true">
			<fileset dir="${conf.dir}">
				<include name="junitgeneration.xml"/>
			</fileset>
			<fileset dir="${conf.dir}">
				<include name="license.txt"/>
			</fileset>
			<filterset>
				<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
				<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
				<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
				<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
				<filter token="OUTPUTDIR" value="${model.src.dir}"/>
			</filterset>
		</copy>
		<copy todir="output/${project_name}/conf" overwrite="true">
			<fileset dir="${conf.dir}">
				<include name="ormgeneration.xml"/>
				<include name="implormgeneration.xml" />
			</fileset>
			<fileset dir="${conf.dir}">
				<include name="license.txt"/>
			</fileset>
			<filterset>
				<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
				<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
				<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
				<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
				<filter token="OUTPUTDIR" value="${orm.output.dir}"/>
			</filterset>
		</copy>

		<copy todir="output/${project_name}/conf" overwrite="true">
			<fileset dir="${conf.dir}">
				<include name="castormappinggeneration.xml"/>
			</fileset>
			<filterset>
				<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
				<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
				<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
				<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
				<filter token="OUTPUTDIR" value="${castormapping.output.dir}"/>
			</filterset>
		</copy>

		<copy todir="output/${project_name}/conf" overwrite="true">
			<fileset dir="${conf.dir}">
				<include name="schemageneration.xml"/>
			</fileset>
			<filterset>
				<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
				<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
				<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
				<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
				<filter token="OUTPUTDIR" value="${schema.output.dir}"/>
			</filterset>
		</copy>

		<copy todir="output/${project_name}/conf" overwrite="true">
			<fileset dir="${conf.dir}">
				<include name="hbcgeneration.xml"/>
			</fileset>
			<fileset dir="${conf.dir}">
				<include name="license.txt"/>
			</fileset>
			<filterset>
				<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
				<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
				<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
				<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
				<filter token="OUTPUTDIR" value="${output.dir}"/>
			</filterset>
		</copy>
		<copy todir="output/${project_name}/conf" overwrite="true">
			<fileset dir="${conf.dir}">
				<include name="commonRoleUtil.xml"/>
			</fileset>
			<filterset>
				<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
				<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
				<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
				<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
				<filter token="OUTPUTDIR" value="${output.dir}/conf/"/>
			</filterset>
		</copy>

		<copy todir="output/${project_name}/conf" overwrite="true">
					<fileset dir="${conf.dir}">
						<include name="commonPackageUtil.xml"/>
					</fileset>
					<filterset>
						<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
						<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
						<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
						<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
						<filter token="OUTPUTDIR" value="${output.dir}/conf/"/>
					</filterset>
				</copy>
		<copy todir="output/${project_name}/conf" overwrite="true">
							<fileset dir="${conf.dir}">
								<include name="evsPackageUtil.xml"/>
							</fileset>
							<filterset>
								<filter token="EVS_MODEL" value="${model.dir}/fixed_${evs_model}"/>
								<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
								<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
								<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
								<filter token="OUTPUTDIR" value="${output.dir}"/>
							</filterset>
						</copy>
		<copy todir="output/${project_name}/conf" overwrite="true">
			<fileset dir="${conf.dir}">
				<include name="ehcacheUtil.xml"/>
			</fileset>
			<filterset>
				<filter token="CACHE_PATH" value="${cachepath}"/>
				<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
				<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
				<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
				<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
				<filter token="OUTPUTDIR" value="${output.dir}/conf/"/>
			</filterset>
		</copy>
		<copy todir="output/${project_name}/conf" overwrite="true">
			<fileset dir="${conf.dir}">
				<include name="wsddUtil.xml"/>
				<include name="undeploy.wsdd" />
			</fileset>
			<filterset>
				<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
				<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
				<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
				<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
				<filter token="OUTPUTDIR" value="${output.dir}/conf/"/>
				<filter token="DEPLOYWSDD" value="deploy.wsdd"/>
				<filter token="WEBSERVICENAME" value="${webservice_name}"/>
			</filterset>
		</copy>
		<!--
				<antcall target="init-logging"/>
		-->
		<copy todir="output/${project_name}/templates/jet">
			<fileset dir="${conf.dir}">
				<include name="Bean*.javajet"/>
				<include name="hqlBean*.javajet"/>
			</fileset>
			<fileset dir="${conf.dir}">
				<include name="Bean*.skeleton"/>
			</fileset>
		</copy>
		<path id="cp">
			<fileset dir="${basedir}/lib">
				<include name="*.jar"/>
			</fileset>
			<pathelement location="${build.classes.dir}"/>
			<pathelement location="${model.build.dir}"/>
			<pathelement location="${conf.dir}"/>
		</path>
		<copy todir="${src.temp.dir}" overwrite="true">
			<fileset dir="${conf.dir}">
				<include name="remoteService.xml"/>
			</fileset>
			<filterset>
				<filter token="PROJECT_NAME" value="${project_name}"/>
				<filter token="WEB_SERVER_NAME" value="${web_server_name}"/>
				<filter token="WEB_SERVER_PORT" value="${web_server_port}"/>
			</filterset>
		</copy>
		<copy file="${src.java.dir}/gov/nih/nci/common/util/Constant.java" todir="${src.temp.dir}/gov/nih/nci/common/util" >
			<filterset>
				<filter token="APPLICATION_NAME" value="${application_name}"/>
				<filter token="DEFAULT_SECURITY_LEVEL" value="${default_security_level}"/>
				<filter token="DEFAULT_SESSION_TIMEOUT" value="${default_session_timeout}"/>
			</filterset>
		</copy>
		<condition property="disable_writable_api">
				<equals arg1="${disable_writable_api_generation}" arg2="1" />
		</condition>
		<antcall target="disable-writable-api" />
	</target>

	<target name="disable-writable-api" if="disable_writable_api">
		<echo>Disabling Writeable APIs</echo>
		<copy todir="${src.temp.dir}" overwrite="true">
			<fileset dir="${src.java.dir}">
				<include name="gov/nih/nci/system/applicationservice/ApplicationService.java"/>
				<include name="gov/nih/nci/system/applicationservice/impl/ApplicationServiceImpl.java"/>
				<include name="gov/nih/nci/system/comm/server/ApplicationServiceServerImpl.java"/>
				<include name="gov/nih/nci/system/comm/common/ApplicationServiceProxy.java"/>
				<include name="gov/nih/nci/system/comm/client/ApplicationServiceClientImpl.java"/>
			</fileset>
			<filterset begintoken="/*@" endtoken="@*/">
				<filter token="WRITABLE_API_START" value="/*"/>
				<filter token="WRITABLE_API_END" value="*/"/>
			</filterset>
		</copy>
	</target>

	<!-- ************************************************************************************************-->
	<!--                                      Initial Aspect J Logging                                   -->
	<!-- ************************************************************************************************-->
	<!--
		<target name="init-logging">
			<copy todir="output/${project_name}/conf" overwrite="true">
				<fileset dir="${conf.dir}">
					<include name="filename.properties"/>
				</fileset>
				<filterset>
					<filter token="DIR" value="${basedir}/log/${project_name}"/>
				</filterset>
			</copy>
			<replaceregexp file = "output/${project_name}/conf/filename.properties" match="\\" replace="/" flags="g"/>
			<property file="output/${project_name}/conf/filename.properties"/>
			<mkdir dir="log/${project_name}"/>
		</target>
-->
	<!-- ************************************************************************************************-->
	<!--                                             Jalopy Task                                         -->
	<!-- ************************************************************************************************-->
	<taskdef name="jalopy" classname="de.hunsicker.jalopy.plugin.ant.AntPlugin">
		<classpath>
			<fileset dir="${lib.dir}">
				<include name="*.jar"/>
			</fileset>
		</classpath>
	</taskdef>
	<target name="format" depends="init-project">
		<mkdir dir="output/${project_name}/jalopy"/>
		<property name="model.jalopy.dir" value="output/${project_name}/jalopy"/>
		<jalopy fileformat="AUTO" loglevel="info" threads="2" failonerror="no" destdir="${model.jalopy.dir}" classpathref="cp">
			<fileset dir="${model.src.dir}">
				<include name="**/*.java"/>
				<exclude name="**/codegen/**"/>
			</fileset>
		</jalopy>
	</target>
	<!-- ************************************************************************************************-->
	<!--                                      ReBuild FrameWork Classes                                  -->
	<!-- ************************************************************************************************-->
	<target name="build-framework" depends="init-project,clean-framework,jar-framework"/>
	<target name="compile-framework">
		<antcall target="init-project"/>
		<antcall target="compile-framework-core"/>
	</target>
	<target name="compile-framework-core">
		<echo message="*****************************************************"/>
		<echo message="**   Compiling Framework Java Classes ...          **"/>
		<echo message="*****************************************************"/>
		<mkdir dir="${build.classes.dir}"/>
		<copy todir="${src.temp.dir}" overwrite="false" >
			<fileset dir="${src.java.dir}"/>
		</copy>
		<javac srcdir="${src.temp.dir}" destdir="${build.classes.dir}">
			<classpath refid="cp"/>
		</javac>
	</target>
	<target name="jar-framework">
		<antcall target="init-project"/>
		<antcall target="compile-framework-core"/>
		<antcall target="jar-framework-core"/>
	</target>

	<target name="jar-framework-core">
		<mkdir dir="${target.dir}/gen"/>
		<jar index="true" jarfile="${target.dir}/gen/codegen.jar">
			<fileset dir="${build.classes.dir}">
				<include name="**/**"/>
			</fileset>
		</jar>
	</target>
	<target name="clean-framework">
		<delete dir="${build.classes.dir}" quiet="true"/>
		<delete dir="${target.dir}" quiet="true"/>
	</target>
	<!-- ************************************************************************************************-->
	<!--                                             Fix EA Model                                        -->
	<!-- ************************************************************************************************-->
	<target name="fix-xmi" if="fix_xmi">
		<antcall target="jar-framework"/>
		<condition property="fix-xmi-yes">
			<equals arg1="${fix_xmi}" arg2="yes" casesensitive="false" trim="true" />
		</condition>
		<antcall target="fix-xmi-core"/>
	</target>

	<target name="fix-xmi-core" if="fix-xmi-yes">
		<echo message="*****************************************************"/>
		<echo message="**   Fixing EA Model ... ...                       **"/>
		<echo message="*****************************************************"/>
		<java classname="gov.nih.nci.codegen.core.util.FixXMI" fork="true" maxmemory="512m">
			<classpath refid="cp"/>
			<jvmarg value="-Xmx512m"/>
			<arg value="${xmi_preprocessor}"/>
			<arg value="${model.dir}/${model_filename}"/>
			<arg value="${model.dir}/${fixed_filename}"/>
		</java>
	</target>
	<!-- ************************************************************************************************-->
	<!--                             Generate Hibernate Configuration File                               -->
	<!-- ************************************************************************************************-->
	<target name="generate-hibernate-conf" depends="init-project">
		<echo message="*****************************************************"/>
		<echo message="**   Generating orm1.cfg.xml file ... ...     **"/>
		<echo message="*****************************************************"/>
		<mkdir dir="${orm.output.dir}"/>
		<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="."/>
				<pathelement location="build"/>
			</classpath>
			<arg value="${properties.dir}/hbcgeneration.xml"/>
		</java>
	</target>
	<!-- ************************************************************************************************-->
	<!--                             Generate DAO Configuration File                               -->
	<!-- ************************************************************************************************-->
	<target name="generate-dao-conf" depends="compile-framework">
		<antcall target="generate-dao-conf-core"/>
	</target>
	<target name="generate-dao-conf-core" depends="init-project">
		<echo message="*****************************************************"/>
		<echo message="**   Generating DAOConfig.xml  ...  ...            **"/>
		<echo message="*****************************************************"/>
		<condition property="skip_DAO_config">
			<istrue value="${build_local_cacore}"/>
		</condition>
		<antcall target="generate-dao-conf-target"/>
	</target>

	<target name="generate-dao-conf-target" if="skip_DAO_config">
		<condition property="use_oracle_yes">
			<istrue value="${use_oracle}"/>
		</condition>
		<condition property="use_db2_yes">
			<istrue value="${use_db2}"/>
		</condition>
		<condition property="use_mysql_yes">
			<not>
				<or>
					<isset property="use_db2_yes"/>
					<isset property="use_oracle_yes"/>
				</or>
			</not>
		</condition>
		<antcall target="set-db2-dao"/>
		<antcall target="set-oracle-dao"/>
		<antcall target="set-mysql-dao"/>

		<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="."/>
				<pathelement location="build"/>
			</classpath>
			<arg value="${properties.dir}/daogeneration.xml"/>
		</java>
	</target>
	<!-- ************************************************************************************************-->
	<!--                                    Generate-OR-Mapping                                          -->
	<!-- ************************************************************************************************-->
	<target name="generate-OR-mapping" depends="generate-hibernate-conf">
		<antcall target="generate-OR-mapping-core"/>
	</target>
	<target name="generate-OR-mapping-core" depends="init-project">

		<!--<condition property="skip_OR_mapping">
				<istrue value="${build_local_cacore}"/>
		</condition>-->
		<condition property="skip_OR_mapping">
			<istrue value="${manual_datamodel}"/>
		</condition>
		<antcall target="generate-OR-mapping-target"/>
	</target>
	<target name="generate-OR-mapping-target" unless="skip_OR_mapping">
		<echo message="*****************************************************"/>
		<echo message="**   Generating OR Mappings ... ...                **"/>
		<echo message="*****************************************************"/>
		<mkdir dir="${orm.output.dir}"/>
		<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="."/>
				<pathelement location="build"/>
			</classpath>
			<arg value="${properties.dir}/ormgeneration.xml"/>
		</java>
		<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="."/>
				<pathelement location="build"/>
			</classpath>
			<arg value="${properties.dir}/implormgeneration.xml"/>
		</java>
		<antcall target="copy-core-customer-orms"/>
	</target>
	<target name="copy-core-customer-orms">
				  <echo message="**** Copying custom orms *** "/>
				  <copy todir="output/${project_name}/orm/hibernate/gov/nih/nci/common/provenance/domain" overwrite="true">
				   <fileset dir="${conf.dir}">
				    <include name="Provenance.hbm.xml" />
				   </fileset>
				  </copy>
		 	       <copy todir="output/${project_name}/orm/hibernate/gov/nih/nci/common/provenance/domain/impl" overwrite="true">
		 				   <fileset dir="${conf.dir}">
		 				    <include name="ProvenanceImpl.hbm.xml" />
		 				   </fileset>
		 				  </copy>
				<copy todir="output/${project_name}/orm/hibernate/gov/nih/nci/cabio/domain" overwrite="true">
				   <fileset dir="${conf.dir}">
				    <include name="Location.hbm.xml" />
				   </fileset>
				  </copy>
		 	       <copy todir="output/${project_name}/orm/hibernate/gov/nih/nci/cabio/domain/impl" overwrite="true">
		 				   <fileset dir="${conf.dir}">
		 				    <include name="LocationImpl.hbm.xml" />
		 				   </fileset>
		 				  </copy>
	</target>
	<!-- ************************************************************************************************-->
	<!--                                    Generate-schemas                                          -->
	<!-- ************************************************************************************************-->
	<target name="generate-schemas">
		<mkdir dir="${schema.output.dir}"/>
		<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="."/>
				<pathelement location="build"/>
			</classpath>
			<arg value="${properties.dir}/schemageneration.xml"/>
		</java>
		
	</target>
	 
	<!-- ************************************************************************************************-->
	<!--                                    Generate-castor-mapping                                          -->
	<!-- ************************************************************************************************-->
	<target name="generate-castor-mapping">
		<mkdir dir="${castormapping.output.dir}"/>
		<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="."/>
				<pathelement location="build"/>
			</classpath>
			<arg value="${properties.dir}/castormappinggeneration.xml"/>
		</java>
	</target>


	<!-- ************************************************************************************************-->
	<!--                                          Generate Beans                                          -->
	<!-- ************************************************************************************************-->

	<target name="generate-beans" depends="compile-framework,fix-xmi,jetc">
		<antcall target="generate-beans-core"/>
	</target>
	<target name="generate-beans-core">
		<echo message="*****************************************************"/>
		<echo message="**   Generating Beans ... ...                      **"/>
		<echo message="*****************************************************"/>
		<condition property="copy_caCORE_webapp_files">
			<istrue value="${build_local_cacore}"/>
		</condition>
		<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
					<classpath refid="cp"/>
					<classpath>
						<pathelement location="."/>
						<pathelement location="build"/>
					</classpath>
					<arg value="${properties.dir}/beangeneration.xml"/>
				</java>		
		

		<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="."/>
				<pathelement location="build"/>
			</classpath>
			<arg value="${properties.dir}/beanimplgeneration.xml"/>
		</java>
	
		<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="."/>
				<pathelement location="build"/>
			</classpath>
			<arg value="${properties.dir}/beanwsgeneration.xml"/>
		</java>

		  <java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
		   <classpath refid="cp"/>
		   <classpath>
		    <pathelement location="."/>
		    <pathelement location="build"/>
		   </classpath>
		   <arg value="${properties.dir}/beanwsimplgeneration.xml"/>
		  </java>
	  
		  <javac srcdir="${model.src.dir}" destdir="${model.build.dir}">
		   <classpath refid="cp"/>
		  </javac>
		 </target>
		 
	<target name="generate-junit" depends="compile-framework,fix-xmi, jetc">
		<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="."/>
				<pathelement location="build"/>
			</classpath>
			<arg value="${properties.dir}/junitgeneration.xml"/>
		</java>
		<javac srcdir="${model.src.dir}" destdir="${model.build.dir}">
			<classpath refid="cp"/>
		</javac>
	</target>
	<!-- ************************************************************************************************-->
	<!--                                             JETC                                                -->
	<!-- ************************************************************************************************-->
	<taskdef name="jetc" classname="ch.paranor.epla.structure.JETCTask">
		<classpath>
			<pathelement location="${lib.dir}/jetc-task.jar"/>
			<fileset dir="${lib.dir}">
				<include name="boot.jar"/>
				<include name="osgi.jar"/>
				<include name="resources.jar"/>
				<include name="runtime.jar"/>
				<include name="codegen.jar"/>
				<include name="jdtcore.jar"/>
			</fileset>
		</classpath>
	</taskdef>
	<target name="jetc" unless="jetc-exec">
		<property name="jetc-exec" value="true" />
	    <jetc template="${javajet.dir}/BeanImpl.javajet" destdir="${model.src.dir}"/>
		<jetc template="${javajet.dir}/Bean.javajet" destdir="${model.src.dir}"/>
		<jetc template="${javajet.dir}/BeanWS.javajet" destdir="${model.src.dir}"/>
		<jetc template="${javajet.dir}/BeanWSImpl.javajet" destdir="${model.src.dir}"/>
		<jetc template="${javajet.dir}/BeanHBJunit.javajet" destdir="${model.src.dir}"/>
		<jetc template="${javajet.dir}/BeanEVSImpl.javajet" destdir="${model.src.dir}"/>
		<jetc template="${javajet.dir}/BeanEVSWS.javajet" destdir="${model.src.dir}"/>
		<javac srcdir="${model.src.dir}" destdir="${model.build.dir}">
			<classpath refid="cp"/>
		</javac>
	</target>


	<!-- ************************************************************************************************-->
	<!--                                             Add License  			                       -->
	<!-- ************************************************************************************************-->
	<target name="add-license" depends="init-project">
		<echo message="*****************************************************"/>
		<echo message="**   Adding licenses ... ...                       **"/>
		<echo message="*****************************************************"/>
		<taskdef name="update-license" classname="gov.nih.nci.codegen.core.ant.LicenseUpdaterTask">
			<classpath refid="cp"/>
		</taskdef>
		<!--echo message="${properties.dir}/license.txt"/-->
		<update-license logFile="log/addlicense.log" beginPattern="LICENSE_TEXT_START" endPattern="LICENSE_TEXT_END" licenseFile="${properties.dir}/license.txt">
			<fileset dir="${src.java.dir}">
				<include name="**/**.java"/>
			</fileset>
			<fileset dir="${cabio.model.src.dir}">
				<include name="**/**.java"/>
				<exclude name="**/Bean.java"/>
				<exclude name="**/BeanImpl.java"/>
				<exclude name="**/BeanWS.java"/>
				<exclude name="**/BeanWSImpl.java"/>
				<exclude name="**/BeanHBJunit.java"/>
				<exclude name="**/BeanEVSWS.java"/>
				<exclude name="**/BeanEVSImpl.java"/>
				
			</fileset>
		</update-license>
		<update-license logFile="log/addlicense.log" beginPattern="LICENSE_TEXT_START" endPattern="LICENSE_TEXT_END" licenseFile="${properties.dir}/license.txt">
			<fileset dir="${cadsr.model.src.dir}">
				<include name="**/**.java"/>
				<exclude name="**/Bean.java"/>
				<exclude name="**/BeanImpl.java"/>
				<exclude name="**/BeanWS.java"/>
				<exclude name="**/BeanWSImpl.java"/>
				<exclude name="**/BeanHBJunit.java"/>
				<exclude name="**/BeanEVSWS.java"/>
				<exclude name="**/BeanEVSImpl.java"/>
			</fileset>
		</update-license>
		<update-license logFile="log/addlicense.log" beginPattern="LICENSE_TEXT_START" endPattern="LICENSE_TEXT_END" licenseFile="${properties.dir}/license.txt">
			<fileset dir="${camod.model.src.dir}">
				<include name="**/**.java"/>
				<exclude name="**/Bean.java"/>
				<exclude name="**/BeanImpl.java"/>
				<exclude name="**/BeanWS.java"/>
				<exclude name="**/BeanWSImpl.java"/>
				<exclude name="**/BeanHBJunit.java"/>
				<exclude name="**/BeanEVSWS.java"/>
				<exclude name="**/BeanEVSImpl.java"/>
			</fileset>
		</update-license>
		<update-license logFile="log/addlicense.log" beginPattern="LICENSE_TEXT_START" endPattern="LICENSE_TEXT_END" licenseFile="${properties.dir}/license.txt">
			<fileset dir="${common.model.src.dir}">
				<include name="**/**.java"/>
				<exclude name="**/Bean.java"/>
				<exclude name="**/BeanImpl.java"/>
				<exclude name="**/BeanWS.java"/>
				<exclude name="**/BeanWSImpl.java"/>
				<exclude name="**/BeanHBJunit.java"/>
				<exclude name="**/BeanEVSWS.java"/>
				<exclude name="**/BeanEVSImpl.java"/>
			</fileset>
		</update-license>
	</target>
	<!-- ************************************************************************************************-->
	<!--                                        JUnit Test                                      -->
	<!-- ************************************************************************************************-->
	<target name="run-test" depends="generate-junit">
		<mkdir dir="output/${project_name}/logs"/>
		<mkdir dir="output/${project_name}/junit-reports"/>
		<junit printsummary="yes" fork="yes">
			<formatter type="plain"/>
			<batchtest fork="true" maxmemory="512m" haltonfailure="no" todir="output/${project_name}/junit-reports">
				<fileset dir="${model.src.dir}">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="output/${project_name}"/>
				<pathelement location="output/${project_name}/orm/hibernate"/>
			</classpath>
		</junit>
	</target>
	<!-- ************************************************************************************************-->
	<!--                             Generate Common Role Utility Class                               -->
	<!-- ************************************************************************************************-->
	<target name="generate-common-role-util" depends="compile-codegen">
		<antcall target="generate-common-role-util-core"/>
	</target>
	<target name="generate-common-role-util-core" depends="init-project">
		<echo message="*****************************************************"/>
		<echo message="**   Generating Common Role Utility Class  ...     **"/>
		<echo message="*****************************************************"/>
		<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="."/>
				<pathelement location="build"/>
			</classpath>
			<arg value="${properties.dir}/commonRoleUtil.xml"/>
		</java>
	</target>
	<copy todir="output/${project_name}/conf" overwrite="true">
		<fileset dir="${conf.dir}">
			<include name="commonRoleUtil.xml"/>
		</fileset>
		<filterset>
			<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
			<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
			<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
			<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
			<filter token="OUTPUTDIR" value="${output.dir}/conf/"/>
		</filterset>
	</copy>
	<!-- ************************************************************************************************-->
		<!--                             Generate Common Package Utility Class                               -->
		<!-- ************************************************************************************************-->
		<target name="generate-common-package-util" depends="compile-codegen">
			<antcall target="generate-common-package-util-core"/>
		</target>
		<target name="generate-common-package-util-core" depends="init-project">
			<echo message="*****************************************************"/>
			<echo message="**   Generating Common Package Utility Class  ...     **"/>
			<echo message="*****************************************************"/>
			<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
				<classpath refid="cp"/>
				<classpath>
					<pathelement location="."/>
					<pathelement location="build"/>
				</classpath>
				<arg value="${properties.dir}/commonPackageUtil.xml"/>
			</java>
		</target>
		<copy todir="output/${project_name}/conf" overwrite="true">
			<fileset dir="${conf.dir}">
				<include name="commonPackageUtil.xml"/>
			</fileset>
			<filterset>
				<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
				<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
				<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
				<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
				<filter token="OUTPUTDIR" value="${output.dir}/conf/"/>
			</filterset>
		</copy>

	<!-- ************************************************************************************************-->
			<!--                             Generate EVS Package Utility Class                               -->
			<!-- ************************************************************************************************-->
			<target name="generate-evs-package-util" depends="compile-codegen">
				<antcall target="generate-evs-package-util-core"/>
			</target>
			<target name="generate-evs-package-util-core" depends="init-project">
				<echo message="*****************************************************"/>
				<echo message="**   Generating EVS Package Utility Class  ...     **"/>
				<echo message="*****************************************************"/>
				<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
					<classpath refid="cp"/>
					<classpath>
						<pathelement location="."/>
						<pathelement location="build"/>
					</classpath>
					<arg value="${properties.dir}/evsPackageUtil.xml"/>
				</java>
			</target>
			<copy todir="output/${project_name}/conf" overwrite="true">
				<fileset dir="${conf.dir}">
					<include name="evsPackageUtil.xml"/>
				</fileset>
				<filterset>
					<filter token="EVS_MODEL" value="${model.dir}/fixed_${evs_model}"/>
					<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
					<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
					<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
					<filter token="OUTPUTDIR" value="${output.dir}"/>
				</filterset>
			</copy>
	<!-- ************************************************************************************************-->
	<!--                             Generate ehcache.xml file                             -->
	<!-- ************************************************************************************************-->
	<target name="generate-ehcache.xml" depends="compile-codegen,fix-xmi" if="create_cache_yes">
		<antcall target="generate-ehcache-core"/>
	</target>
	<target name="generate-ehcache-core" depends="init-project" if="create_cache_yes">
		<echo message="*****************************************************"/>
		<echo message="**   Generating ehcache.xml file  ...  ...         **"/>
		<echo message="*****************************************************"/>
		<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="."/>
				<pathelement location="build"/>
			</classpath>
			<arg value="${properties.dir}/ehcacheUtil.xml"/>
		</java>
	</target>
	<copy todir="output/${project_name}/conf" overwrite="true">
		<fileset dir="${conf.dir}">
			<include name="ehcacheUtil.xml"/>
		</fileset>
		<filterset>
			<filter token="CACHE_PATH" value="${cachepath}"/>
			<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
			<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
			<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
			<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
			<filter token="OUTPUTDIR" value="${output.dir}/conf/"/>
		</filterset>
	</copy>

	<!-- ************************************************************************************************-->
	<!--                             Generate deploy.wsdd file                             -->
	<!-- ************************************************************************************************-->
	<target name="generate-wsdd" depends="compile-codegen,fix-xmi">
		<antcall target="generate-wsdd-core"/>
	</target>

	<target name="generate-wsdd-core" depends="init-project">
		<echo message="*****************************************************"/>
		<echo message="**   Generating deploy.wsdd file                   **"/>
		<echo message="*****************************************************"/>
		<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="."/>
				<pathelement location="build"/>
			</classpath>
			<arg value="${properties.dir}/wsddUtil.xml"/>
		</java>
	</target>
	<copy todir="output/${project_name}/conf" overwrite="true">
		<fileset dir="${conf.dir}">
			<include name="wsddUtil.xml"/>
			<include name="undeploy.wsdd" />
		</fileset>
		<filterset>
			<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
			<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
			<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
			<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
			<filter token="OUTPUTDIR" value="${output.dir}/conf/"/>
			<filter token="DEPLOYWSDD" value="deploy.wsdd"/>
			<filter token="WEBSERVICENAME" value="${webservice_name}"/>
		</filterset>
	</copy>
	<!-- ************************************************************************************************-->
	<!--                                      Build CODEGEN Classes                                  -->
	<!-- ************************************************************************************************-->
	<target name="compile-codegen" depends="init-project">
		<antcall target="compile-codegen-core"/>
	</target>
	<target name="compile-codegen-core">
		<echo message="*****************************************************"/>
		<echo message="**   Compiling Generated Java Classes ...          **"/>
		<echo message="*****************************************************"/>
		<mkdir dir="${build.classes.dir}"/>
		<javac srcdir="${codegensrc.java.dir}" destdir="${build.classes.dir}">
			<classpath refid="cp"/>
		</javac>
	</target>
	
	<!-- ************************************************************************************************-->
	<!--                                             AJDOC                                         -->
	<!-- ************************************************************************************************-->
	<target name="doc" depends="init-project">
		<mkdir dir="output/javadoc"/>
		<javadoc packagenames="*" destdir="output/javadoc" author="true" public="true"  useexternalfile="yes" version="true" use="true" windowtitle="${project_name} JAVADOC" doctitle="${project_name} JAVADOC">
			<fileset dir="${src.java.dir}">
				<include name="**/*.java"/>
				<exclude name="**/aspect/**"/>
			</fileset>
			<fileset dir="${model.src.dir}">
					<include name="**/*.java"/>
			</fileset>
		</javadoc>
	</target>
	<!-- ************************************************************************************************-->
	<!--                                             Packing                                             -->
	<!-- ************************************************************************************************-->
	<target name="pack-application" depends="init-project">
		<echo message="*****************************************************"/>
		<echo message="**   Packing ... ...                               **"/>
		<echo message="*****************************************************"/>
		<mkdir dir="output/temp/${project_name}"/>
		<mkdir dir="output/temp/${project_name}/client"/>
		<mkdir dir="output/temp/${project_name}/log"/>
		<mkdir dir="output/temp/${project_name}/WEB-INF"/>
		<mkdir dir="output/temp/${project_name}/WEB-INF/lib"/>
		<mkdir dir="output/temp/${project_name}/WEB-INF/classes"/>
		<mkdir dir="output/temp/${project_name}/WEB-INF/conf"/>
		<copy todir="output/temp/${project_name}/WEB-INF/lib">
			<fileset dir="${lib.dir}">
				<exclude name="log4j-1.2.8.jar"/>
				<exclude name="commons-logging*.*"/>
				<exclude name="spring-richclient.jar"/>
			</fileset>
		</copy>
		<copy todir="output/temp/${project_name}/log">
			<fileset dir="${conf.dir}">
				<include name="server.log"/>
				<include name="client.log"/>
				<include name="hibernate.log"/>
			</fileset>
		</copy>
		<copy todir="output/temp/${project_name}/WEB-INF">
			<fileset dir="${conf.dir}/wsdl">
				<include name="server-config.wsdd" />
			</fileset>
			<fileset dir="${conf.dir}">
				<include name="applicationContext.xml"/>
				<include name="httpinvoker-servlet.xml"/>
				<include name="hibernate-configuration-3.0.dtd"/>
				<include name="hibernate-mapping-3.0.dtd"/>
			</fileset>
		</copy>
		<copy todir="output/temp/${project_name}/WEB-INF/classes">
			<fileset dir="${build.classes.dir}">
				<exclude name="**/ApplicationServiceClientImpl.class" />
				<exclude name="**/ClientSession.class" />
			</fileset>
			<fileset dir="${conf.dir}">
				<include name="applicationService.xml"/>
			</fileset>
			<fileset dir="${model.build.dir}"/>
			<fileset dir="${orm.output.dir}"/>
			<fileset dir="output/${project_name}/conf">
				<include name="ehcache.xml"/>
			</fileset>
		</copy>
		<!-- copy Happy.jsp to cabio directry -->
		<copy todir="output/temp/${project_name}">
			<fileset dir="${conf.dir}">
				<include name="Happy.jsp"/>
				<include name="Classes.jsp"/>
				<include name="Packages.jsp"/>
				<include name="Criteria.jsp"/>
				<include name="Result.jsp"/>
			</fileset>
		</copy>

		<!-- copy XSLT files, stylesheet and images-->
	  <copy todir="output/temp/${project_name}">
	     <fileset dir="${conf.dir}/xslt">
	      <include name="**/**"/>
	      <exclude name="*.xsl"/>
	     </fileset>
	  </copy>
	  <mkdir dir="output/temp/${project_name}/WEB-INF/classes/xslt"/>
	  <copy todir="output/temp/${project_name}/WEB-INF/classes/xslt">
	       <fileset dir="${conf.dir}/xslt">
	        <include name="*.xsl"/>
	       </fileset>
	       <filterset>
	        <filter token="XSLT_PATH" value="${project_name}"/>
	       </filterset>
	    </copy>

		<!--<mkdir dir="${xsltpath}"/>
	    <copy todir="${xsltpath}">
	     <fileset dir="${conf.dir}/xslt">
	      <include name="**/*"/>
	     </fileset>
	    </copy>-->

		<condition property="use_oracle_yes">
			<istrue value="${use_oracle}"/>
		</condition>
		<condition property="use_db2_yes">
			<istrue value="${use_db2}"/>
		</condition>
		<condition property="use_mysql_yes">
			<istrue value="${use_mysql}"/>
		</condition>
		<!--
		<condition property="use_mysql_yes">
			<not>
				<or>
					<isset property="use_db2_yes"/>
					<isset property="use_oracle_yes"/>
				</or>
			</not>
		</condition>
		-->
		<antcall target="build-db2-hibernate"/>
		<antcall target="build-oracle-hibernate"/>
		<antcall target="build-mysql-hibernate"/>
		<antcall target="set-db2-dao"/>
		<antcall target="set-oracle-dao"/>
		<antcall target="set-mysql-dao"/>
		<antcall target="copy-webapp-files"/>

		<mkdir dir="output/package/${web_server_name}"/>
		<!-- Pack server file -->
		<war destfile="output/package/${web_server_name}/${project_name}.war" webxml="conf/web.xml" basedir="output/temp/${project_name}" excludes="*.war"/>



		<!-- Pack client.zip -->
		<javac srcdir="${model.src.dir}" destdir="${model.client.build.dir}">
			<classpath refid="cp"/>
		</javac>
		<mkdir dir="output/package/${web_server_name}/client/lib"/>
		<jar destfile="output/package/${web_server_name}/client/lib/client.jar">
			<fileset dir="${conf.dir}">
				<include name="mapping.dtd"/>
			</fileset>
			<fileset dir="${model.client.build.dir}">
				<exclude name="**/system/*"/>
			</fileset>
			<fileset dir="output/temp/${project_name}/WEB-INF/classes">
				<include name="**/system/applicationservice/*"/>
				<include name="**/system/delegator/DelegateException.class"/>
				<include name="**/system/proxy/InterfaceProxy.class"/>
				<include name="**/comm/common/ApplicationServiceProxy.class"/>
				<include name="**/system/aspect/**"/>
				<include name="**/common/util/**"/>
				<include name="**/common/net/**"/>
				<include name="**/common/exception/**"/>
				<include name="**/evs/**"/>
				<include name="roleLookup.properties"/>
				<include name="cacoreBeans.properties"/>
				<include name="evsBeans.properties"/>
				<include name="CORESystem.properties"/>
				<include name="ehcache.xml"/>
				<include name="xml.properties"/>
				<include name="xml-mapping.xml"/>
				<include name="*.xsd"/>
			</fileset>
			<fileset dir="${build.classes.dir}">
				<include name="**/ApplicationServiceClientImpl.class" />
				<include name="**/ClientSession.class" />
			</fileset>
		</jar>
		<copy todir="output/package/${web_server_name}/client/lib">
			<fileset dir="${lib.dir}">
				<include name="mail.jar"/>
				<include name="activation.jar"/>
				<include name="aspect*.jar"/>
				<include name="*Hibernate*.jar"/>
				<include name="hibernate3.jar"/>
				<include name="log4j*.jar"/>
				<include name="commons-logging.jar"/>
				<include name="cglib-full*.jar"/>
				<include name="castor-0.9.9.jar"/>
				<include name="xercesImpl.jar"/>
				<include name="roleLookup.properties"/>
				<include name="cacoreBeans.properties"/>
				<include name="evsBeans.properties"/>
				<include name="CORESystem.properties"/>
				<include name="xml.properties"/>
				<include name="xml-mapping.xml"/>
				<include name="*.xsd"/>
				<!-- evs web service -->
				<include name="axis.jar"/>
				<include name="commons-discovery-0.2.jar"/>
				<include name="jaxrpc.jar"/>
				<include name="wsdl4j-1.5.1.jar"/>
				<include name="saaj.jar"/>
				<include name="axis-ant.jar"/>
				<include name="spring.jar"/>
				<include name="spring-richclient.jar"/>
				<include name="xml-apis.jar"/>
				<!--<include name="xerces.jar"/>-->
			</fileset>
			<fileset dir="${conf.dir}">
				<include name="mapping.dtd"/>
			</fileset>
		</copy>
		<mkdir dir="output/package/${web_server_name}/client/conf"/>
		<copy todir="output/package/${web_server_name}/client/conf">
			<fileset dir="${conf.dir}">
				<include name="client_log4j.properties"/>
			</fileset>
			<fileset dir="${src.temp.dir}">
				<include name="remoteService.xml"/>
			</fileset>
			<filterset>
				<filter token="WEB_SERVER_NAME" value="${web_server_name}"/>
				<filter token="WEB_SERVER_PORT" value="${web_server_port}"/>
				<filter token="PROJECT_NAME" value="${project_name}"/>
			</filterset>		
		</copy>
		<copy file="${conf.dir}/build_client.xml" tofile="output/package/${web_server_name}/client/build.xml" overwrite="true">
			<filterset>
				<filter token="AXIS_SERVICE" value="-lhttp://${web_server_name}:8080/${project_name}/ws/AdminService"/>
			</filterset>
		</copy>

		<copy file="${conf.dir}/ClientREADME.txt" tofile="output/package/${web_server_name}/client/README.txt"/>
		<copy file="${conf.dir}/xml.properties" tofile="output/package/${web_server_name}/client/lib/xml.properties"/>
		<copy file="${castormapping.output.dir}/xml-mapping.xml" tofile="output/package/${web_server_name}/client/lib/xml-mapping.xml"/>
		<copy todir="output/package/${web_server_name}/client/lib">
					<fileset dir="${schema.output.dir}">
						<include name="*.xsd"/>
					</fileset>
		</copy>

		<copy file="evsmonitor.bat" tofile="output/package/${web_server_name}/client/evsmonitor.bat"/>
		<copy file="demo/TestClient.java" tofile="output/package/${web_server_name}/client/TestClient.java"/>
		<copy file="demo/TestXML.java" tofile="output/package/${web_server_name}/client/TestXML.java"/>
		<copy file="demo/TestEVS.java" tofile="output/package/${web_server_name}/client/TestEVS.java"/>
		<copy file="demo/TestDSR.java" tofile="output/package/${web_server_name}/client/TestDSR.java"/>
		<copy file="demo/TestSVG.java" tofile="output/package/${web_server_name}/client/TestSVG.java"/>
		<copy file="demo/EVSMonitor.java" tofile="output/package/${web_server_name}/client/EVSMonitor.java"/>
		<copy file="demo/webservice/WSTestClient.java" tofile="output/package/${web_server_name}/client/WSTestClient.java">
			<filterset>
				<filter token="WEB_SERVER_NAME" value="${web_server_name}"/>
				<filter token="WEB_SERVER_PORT" value="${web_server_port}"/>
				<filter token="PROJECT_NAME" value="${project_name}"/>
				<filter token="WEBSERVICENAME" value="${webservice_name}"/>
			</filterset>		
		</copy>
		<copy file="demo/EVSWSClient.java" tofile="output/package/${web_server_name}/client/EVSWSClient.java">
			<filterset>
				<filter token="WEB_SERVER_NAME" value="${web_server_name}"/>
				<filter token="WEB_SERVER_PORT" value="${web_server_port}"/>
				<filter token="PROJECT_NAME" value="${project_name}"/>
				<filter token="WEBSERVICENAME" value="${webservice_name}"/>
			</filterset>
		</copy>
		
		<copy todir="output/package/${web_server_name}/client/conf">
			<fileset dir="${properties.dir}">
				<include name="deploy.wsdd"/>
			</fileset>
		</copy>
		<mkdir dir="output/package/${web_server_name}/client/log"/>
		<copy todir="output/package/${web_server_name}/client/log">
			<fileset dir="output/temp/${project_name}/log">
				<include name="client.log"/>
			</fileset>
		</copy>
		<!-- Verify that test clients compile -->
		<javac srcdir="output/package/${web_server_name}/client" destdir="output/temp/${project_name}/client"
			includes="*.java" failonerror="yes">
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="demo"/>
			</classpath>
		</javac>
		<zip destfile="output/package/${web_server_name}/client.zip" basedir="output/package/${web_server_name}/client"/>
	</target>
	<target name="build-mysql-hibernate" if="use_mysql_yes">
		<echo message="*****************************************************"/>
		<echo message="**   Building mysql hibernate ...                               **"/>
		<echo message="*****************************************************"/>
		<delete file="${conf.dir}/hibernate.properties"/>
		<copy file="${conf.dir}/hibernate.properties.mysql" tofile="${conf.dir}/hibernate.properties"/>
		<replaceregexp file="${conf.dir}/hibernate.properties" match="@DBNAME@" replace="${schema_name}" flags="g"/>
		<replaceregexp file="${conf.dir}/hibernate.properties" match="@DBUSER@" replace="${db_user}" flags="g"/>
		<replaceregexp file="${conf.dir}/hibernate.properties" match="@SERVERNAME@" replace="${db_server_name}" flags="g"/>
		<replaceregexp file="${conf.dir}/hibernate.properties" match="@DBPASSWD@" replace="${db_password}" flags="g"/>
		<antcall target="check-cache-flag"/>
		<antcall target="check-not-cache-flag"/>
		<antcall target="check-show-sql-flag"/>
		<antcall target="check-not-show-sql-flag"/>
		<delete file="output/${project_name}/hibernate.properties"/>
		<copy file="${conf.dir}/hibernate.properties" tofile="output/${project_name}/hibernate.properties"/>
	</target>
	<target name="build-oracle-hibernate" if="use_oracle_yes">
		<delete file="${conf.dir}/hibernate.properties"/>
		<copy file="${conf.dir}/hibernate.properties.oracle" tofile="${conf.dir}/hibernate.properties"/>
		<replaceregexp file = "${conf.dir}/hibernate.properties" match="@DBNAME@" replace="${schema_name}" flags="g"/>
		<replaceregexp file = "${conf.dir}/hibernate.properties" match="@DBUSER@" replace="${db_user}" flags="g"/>
		<replaceregexp file = "${conf.dir}/hibernate.properties" match="@SERVERNAME@" replace="${db_server_name}" flags="g"/>
		<replaceregexp file = "${conf.dir}/hibernate.properties" match="@DBPASSWD@" replace="${db_password}" flags="g"/>
		<antcall target="check-cache-flag"/>
		<antcall target="check-not-cache-flag"/>
		<antcall target="check-show-sql-flag"/>
		<antcall target="check-not-show-sql-flag"/>
		<delete file="output/${project_name}/hibernate.properties"/>
		<copy file="${conf.dir}/hibernate.properties" tofile="output/${project_name}/hibernate.properties"/>

	</target>
	<target name="build-db2-hibernate" if="use_db2_yes">
		<delete file="${conf.dir}/hibernate.properties"/>
		<copy file="${conf.dir}/hibernate.properties.db2" tofile="${conf.dir}/hibernate.properties"/>
		<replaceregexp file="${conf.dir}/hibernate.properties" match="@DBNAME@" replace="${schema_name}" flags="g"/>
		<replaceregexp file="${conf.dir}/hibernate.properties" match="@DBUSER@" replace="${db_user}" flags="g"/>
		<replaceregexp file="${conf.dir}/hibernate.properties" match="@SERVERNAME@" replace="${db_server_name}" flags="g"/>
		<replaceregexp file="${conf.dir}/hibernate.properties" match="@DBPASSWD@" replace="${db_password}" flags="g"/>
		<antcall target="check-cache-flag"/>
		<antcall target="check-not-cache-flag"/>
		<antcall target="check-show-sql-flag"/>
		<antcall target="check-not-show-sql-flag"/>
		<delete file="output/${project_name}/hibernate.properties"/>
		<copy file="${conf.dir}/hibernate.properties" tofile="output/${project_name}/hibernate.properties"/>
	</target>

	<target name="check-cache-flag" if="create_cache_yes">
		<replaceregexp file="${conf.dir}/hibernate.properties" match="@SECONDLEVELCACHE@" replace="true" flags="g"/>
	</target>
	<target name="check-not-cache-flag" unless="create_cache_yes">
		<replaceregexp file="${conf.dir}/hibernate.properties" match="@SECONDLEVELCACHE@" replace="false" flags="g"/>
	</target>

	<target name="check-show-sql-flag" if="show_sql_yes">
		<replaceregexp file="${conf.dir}/hibernate.properties" match="@SHOWSQL@" replace="true" flags="g"/>
	</target>
	
	<target name="check-not-show-sql-flag" unless="show_sql_yes">
		<replaceregexp file="${conf.dir}/hibernate.properties" match="@SHOWSQL@" replace="false" flags="g"/>
	</target>
	
	<target name="set-mysql-dao" if="use_mysql_yes">
		<copy todir="output/${project_name}/conf" overwrite="true">
			<fileset dir="${conf.dir}">
				<include name="daogeneration.xml"/>
			</fileset>
			<fileset dir="${conf.dir}">
				<include name="license.txt"/>
			</fileset>
			<filterset>
				<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
				<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
				<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
				<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
				<filter token="OUTPUTDIR" value="${output.dir}"/>
				<filter token="DATABASE" value="mysql"/>
				<filter token="EXTERNALSERVER" value="${external_server_name}"/>
				<filter token="EVSDTSRPCSERVER" value="${evs_dtsrpc_server}"/>
				<filter token="EVSDTSRPCPORT" value="${evs_dtsrpc_port}"/>
				<filter token="EVSMETAPHRASESERVER" value="${evs_metaphrase_server}"/>
				<filter token="EVSMETAPHRASEDATABASE" value="${evs_metaphrase_database}"/>
				<filter token="EVSMETAPHRASEUSERNAME" value="${evs_metaphrase_username}"/>
				<filter token="EVSMETAPHRASEPASSWORD" value="${evs_metaphrase_password}"/>
			</filterset>
		</copy>
	</target>
	<target name="set-oracle-dao" if="use_oracle_yes">
		<copy todir="output/${project_name}/conf" overwrite="true">
			<fileset dir="${conf.dir}">
				<include name="daogeneration.xml"/>
			</fileset>
			<fileset dir="${conf.dir}">
				<include name="license.txt"/>
			</fileset>
			<filterset>
				<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
				<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
				<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
				<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
				<filter token="OUTPUTDIR" value="${output.dir}"/>
				<filter token="DATABASE" value="oracle"/>
				<filter token="EXTERNALSERVER" value="${external_server_name}"/>
				<filter token="EVSDTSRPCSERVER" value="${evs_dtsrpc_server}"/>
				<filter token="EVSDTSRPCPORT" value="${evs_dtsrpc_port}"/>
				<filter token="EVSMETAPHRASESERVER" value="${evs_metaphrase_server}"/>
				<filter token="EVSMETAPHRASEDATABASE" value="${evs_metaphrase_database}"/>
				<filter token="EVSMETAPHRASEUSERNAME" value="${evs_metaphrase_username}"/>
				<filter token="EVSMETAPHRASEPASSWORD" value="${evs_metaphrase_password}"/>
			</filterset>
		</copy>
	</target>
	<target name="set-db2-dao" if="use_db2_yes">
		<copy todir="output/${project_name}/conf" overwrite="true">
			<fileset dir="${conf.dir}">
				<include name="daogeneration.xml"/>
			</fileset>
			<fileset dir="${conf.dir}">
				<include name="license.txt"/>
			</fileset>
			<filterset>
				<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
				<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
				<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
				<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
				<filter token="OUTPUTDIR" value="${output.dir}"/>
				<filter token="DATABASE" value="db2"/>
				<filter token="EXTERNALSERVER" value="${external_server_name}"/>
				<filter token="EVSDTSRPCSERVER" value="${evs_dtsrpc_server}"/>
				<filter token="EVSDTSRPCPORT" value="${evs_dtsrpc_port}"/>
				<filter token="EVSMETAPHRASESERVER" value="${evs_metaphrase_server}"/>
				<filter token="EVSMETAPHRASEDATABASE" value="${evs_metaphrase_database}"/>
				<filter token="EVSMETAPHRASEUSERNAME" value="${evs_metaphrase_username}"/>
				<filter token="EVSMETAPHRASEPASSWORD" value="${evs_metaphrase_password}"/>
			</filterset>
		</copy>
	</target>
	<!-- ************************************************************************************************-->
	<!--                                    Create Web App                                          -->
	<!-- ************************************************************************************************-->
	<target name="copy-webapp-files">
		<echo message="*****************************************************"/>
		<echo message="**   Copying caCORE webapp files #1.. ...           **"/>
		<echo message="*****************************************************"/>

		<condition property="copy_caCORE_webapp_files">
			<istrue value="${build_local_cacore}"/>
		</condition>
		<antcall target="swap-DB-schema-settings"/>
		<antcall target="copy-webappfiles-caCORE"/>
		<antcall target="copy-webappfiles"/>
	</target>
	<target name="copy-webappfiles-caCORE" if="copy_caCORE_webapp_files">
		<echo message="*****************************************************"/>
		<echo message="**   Copying caCORE webapp files .#2.. ...           **"/>
		<echo message="*****************************************************"/>

		<copy todir="output/temp/${project_name}/WEB-INF/classes">
			<fileset dir="${conf.dir}">
				<include name="log4j.properties"/>
				<include name="hibernate.properties"/>
				<include name="orm1.cfg.xml"/>
				<include name="orm2.cfg.xml"/>
				<include name="ehcache.xml"/>
				<include name="xml.properties"/>
				<include name="xml-mapping.xml"/>
				<include name="CORESystem.properties"/>
				<include name="*.xsl"/>
			</fileset>
			<fileset dir="${castormapping.output.dir}">
					<include name="xml-mapping.xml"/>
			</fileset>


			<fileset dir="output/${project_name}/conf">
				<include name="roleLookup.properties"/>
				<include name="cacoreBeans.properties"/>
				<include name="evsBeans.properties"/>
				<include name="ehcache.xml"/>
			</fileset>
		</copy>

		<copy todir="output/temp/${project_name}/WEB-INF/conf">
			<fileset dir="${conf.dir}">
				<include name="DAOConfig.xml"/>
			</fileset>
		</copy>


		<condition property="copy_caCORE_webapp_files">
			<istrue value="no"/>
		</condition>
	</target>



	<!-- ************************************************************************************************-->
	<!--                                    Set database settings for caCORE                                          -->
	<!-- ************************************************************************************************-->
	<target name="swap-DB-schema-settings">
		<delete file="${conf.dir}/orm1.cfg.xml"/>
		<copy file="${conf.dir}/orm1.cfg.xml.cacore" tofile="${conf.dir}/orm1.cfg.xml"/>
		<replaceregexp file="${conf.dir}/orm1.cfg.xml" match="DBSERVER" replace="${database-server}"/>
	</target>



	<target name="copy-webappfiles" unless="copy_caCORE_webapp_files">
		<echo message="*****************************************************"/>
		<echo message="**   Copying webapp files  #3... ...                **"/>
		<echo message="*****************************************************"/>
		<copy todir="output/temp/${project_name}/WEB-INF/classes">
			<fileset dir="${conf.dir}">
				<include name="log4j.properties"/>
				<include name="hibernate.properties"/>
				<include name="CORESystem.properties"/>
				<include name="xml.properties"/>
				<include name="xml-mapping.xml"/>
				<include name="ehcache.xml"/>
			</fileset>
			<fileset dir="${output.dir}">
				<include name="orm1.cfg.xml"/>
				<include name="DAOConfig.xml"/>
			</fileset>
			<fileset dir="output/${project_name}/conf">
				<include name="roleLookup.properties"/>
				<include name="cacoreBeans.properties"/>
				<include name="evsBeans.properties"/>
				<include name="ehcache.xml"/>
			</fileset>
		</copy>
		<copy todir="output/temp/${project_name}/WEB-INF/conf">
			<fileset dir="${conf.dir}">
				<include name="log4j.properties"/>
				<include name="hibernate.properties"/>
			</fileset>
			<fileset dir="${output.dir}">
				<include name="DAOConfig.xml"/>
			</fileset>
			<fileset dir="output/${project_name}/conf">
				<include name="roleLookup.properties"/>
				<include name="cacoreBeans.properties"/>
				<include name="evsBeans.properties"/>
				<include name="ehcache.xml"/>
			</fileset>
		</copy>
	</target>




	<!-- ************************************************************************************************-->
	<!--                                             Deployment                                          -->
	<!-- ************************************************************************************************-->
	<target name="deploy">
		<echo message="*****************************************************"/>
		<echo message="**   Deploying ... ...                             **"/>
		<echo message="*****************************************************"/>
		<condition property="windows">
			<contains substring="windows" casesensitive="no" string="${os.name}"/>
		</condition>
		<condition property="linux">
			<contains substring="linux" casesensitive="no" string="${os.name}"/>
		</condition>
		<condition property="unix">
			<contains substring="unix" casesensitive="no" string="${os.name}"/>
		</condition>
		<antcall target="init-project"/>
		<!--antcall target="stop-tomcat"/>
			<sleep seconds="5"/-->
		<copy todir="${env.ANT_HOME}/lib">
			<fileset dir="${lib.dir}">
				<filename name="junit.jar"/>
			</fileset>
		</copy>
		<condition property="jboss">
			<contains substring="jboss" casesensitive="no" string="${container_type}"/>
		</condition>
		<condition property="tomcat">
			<not>
				<contains substring="jboss" casesensitive="no" string="${container_type}"/>
			</not>
		</condition>

		<antcall target="deploy-tomcat"/>
		<antcall target="deploy-jboss"/>

		<echo message="************************************************************************"/>
		<echo message="**   caCORE ToolKit Has Been Sucessfully Installed !!!!!!!!!!!!!!     **"/>
		<echo message="************************************************************************"/>
	</target>
	<target name="deploy-tomcat" if="tomcat">
		<delete dir="${j2se_container_home}/webapps/${project_name}"/>
		<delete file="${j2se_container_home}/webapps/${project_name}.war"/>
		<copy tofile="${j2se_container_home}/webapps/${project_name}.war">
			<fileset dir="output/package/${web_server_name}">
				<filename name="${project_name}.war"/>
			</fileset>
		</copy>
		<antcall target="start-tomcat-windows"/>
		<antcall target="start-tomcat-linux"/>
		<antcall target="start-tomcat-unix"/>
	</target>
	<target name="deploy-jboss" if="jboss">
		<delete file="${j2se_container_home}/server/${jboss_configuration}/deploy/${project_name}.war"/>
		<copy tofile="${j2se_container_home}/server/${jboss_configuration}/deploy/${project_name}.war">
			<fileset dir="output/package/${web_server_name}">
				<filename name="${project_name}.war"/>
			</fileset>
		</copy>
		<antcall target="start-jboss-windows"/>
		<antcall target="start-jboss-linux"/>
		<antcall target="start-jboss-unix"/>
	</target>

	<target name="start-tomcat-linux" if="linux">
		<echo message="Starting Tomcat..."/>
		<chmod dir="${j2se_container_home}/bin" includes="*.*" perm="u+x"/>
		<chmod dir="${j2se_container_home}/bin" includes="*" perm="u+x"/>
		<exec dir="${j2se_container_home}/bin" executable="nohup" spawn="true">
			<arg line="startup.sh"/>
		</exec>
	</target>
	<target name="start-tomcat-unix" if="unix">
		<exec dir="${j2se_container_home}/bin" executable="nohup" spawn="true">
			<arg line="startup.sh"/>
		</exec>
	</target>
	<target name="start-tomcat-windows" if="windows">
		<exec dir="${j2se_container_home}/bin" executable="cmd" spawn="true">
			<arg line="/C start ${j2se_container_home}/bin/startup.bat"/>
		</exec>
	</target>
	<target name="stop-tomcat">
		<exec dir="${j2se_container_home}/bin" executable="cmd" spawn="true">
			<arg line="/c start ${j2se_container_home}/bin/shutdown.bat"/>
		</exec>
	</target>

	<target name="start-jboss-linux" if="linux">
		<echo message="Starting JBoss..."/>
		<chmod dir="${j2se_container_home}/bin" includes="*.*" perm="u+x"/>
		<chmod dir="${j2se_container_home}/bin" includes="*" perm="u+x"/>
		<exec dir="${j2se_container_home}/bin" executable="nohup" spawn="true">
			<arg line="run.sh -c ${jboss_configuration}"/>
		</exec>
	</target>
	<target name="start-jboss-unix" if="unix">
		<exec dir="${j2se_container_home}/bin" executable="nohup" spawn="true">
			<arg line="run.sh -c ${jboss_configuration}"/>
		</exec>
	</target>
	<target name="start-jboss-windows" if="windows">
		<exec dir="${j2se_container_home}/bin" executable="cmd" spawn="true">
			<arg line="/C start ${j2se_container_home}/bin/run.bat -c ${jboss_configuration}"/>
		</exec>
	</target>
	<target name="stop-jboss">
		<exec dir="${j2se_container_home}/bin" executable="cmd" spawn="true">
			<arg line="/c start ${j2se_container_home}/bin/shutdown.bat"/>
		</exec>
	</target>



	<target name="build-system" depends="package-system,deploy-system"/>
	<target name="package-system">
		<antcall target="clean"/>
		<antcall target="download-libs"/>
		<antcall target="init-project"/>
		<antcall target="compile-framework-core"/>
		<antcall target="jar-framework-core"/>
		<antcall target="fix-xmi"/>
		<antcall target="jetc"/>
		<antcall target="generate-beans-core"/>
		<antcall target="compile-codegen-core"/>
		<antcall target="generate-common-role-util-core"/>
		<antcall target="generate-common-package-util-core"/>
		<antcall target="generate-evs-package-util-core"/>
		<antcall target="generate-evs-ws-beans-core"/>
		<condition property="create_cache_yes">
			<istrue value="${create_cache}"/>
		</condition>
		
		
		
		<condition property="show_sql_yes">
			<istrue value="${show_sql}"/>
		</condition>
		
		
		<antcall target="generate-ehcache-core"/>
		<!--
		<antcall target="generate-wsdd-core"/>
-->
		<antcall target="generate-wsdd-with-evs-core"/>
		<!--<antcall target="generate-junit"/> -->
		<antcall target="generate-castor-mapping"/>
		<antcall target="generate-schemas"/>
		<antcall target="generate-hibernate-conf"/>
		<antcall target="generate-dao-conf-core"/>
		<antcall target="generate-OR-mapping-core"/>
		<antcall target="pack-application"/>
		<!-- <antcall target="deploy"/> -->
	</target>
	<target name="deploy-system">
		<antcall target="deploy"/>
	</target>
	<!-- ************************************************************************************************-->
	<!--                                             Run Demo                                          -->
	<!-- ************************************************************************************************-->
	<target name="rundemo" depends="init-project">
		<javac srcdir="demo">
			<include name="TestClient.java"/>
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="demo"/>
			</classpath>
		</javac>
		<java classname="TestClient" fork="true" maxmemory="512m">
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="demo"/>
			</classpath>
			<sysproperty key="log4j.configuration" value="${conf.dir}/client_log4j.properties"/>
		</java>
	</target>
	<target name="runevs">
		<javac srcdir=".">
			<include name="TestEVS.java"/>
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="${src.dir}"/>
			</classpath>
		</javac>
		<java classname="TestEVS" fork="true" maxmemory="512m">
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="${src.dir}"/>
			</classpath>
			<sysproperty key="log4j.configuration" value="${conf.dir}/client_log4j.properties"/>
		</java>
	</target>
	<!-- ************************************************************************************************-->
	<!--                                         Deploy web services                                     -->
	<!-- ************************************************************************************************-->
	<target name="deployWS" depends="init-project">
		<java classname="org.apache.axis.client.AdminClient" fork="true" maxmemory="512m">
			<classpath>
				<pathelement location="webservice"/>
			</classpath>
			<classpath refid="cp"/>
			<arg value="-lhttp://${web_server_name}:8080/${project_name}/ws/AxisServlet"/>
			<arg value="${output.dir}/conf/deploy.wsdd"/>
		</java>
		<echo message="************************************************************************"/>
		<echo message="**   Web services have been DEPLOYED                                  **"/>
		<echo message="************************************************************************"/>
	</target>
	<target name="undeployWS" depends="init-project">
		<java classname="org.apache.axis.client.AdminClient" fork="true" maxmemory="512m">
			<classpath>
				<pathelement location="webservice"/>
			</classpath>
			<classpath refid="cp"/>
			<arg value="-lhttp://${web_server_name}:8080/${project_name}/ws/AxisServlet"/>
			<arg value="${output.dir}/conf/undeploy.wsdd"/>
		</java>
		<echo message="************************************************************************"/>
		<echo message="**   Web services have been UNDEPLOYED                                  **"/>
		<echo message="************************************************************************"/>
	</target>
	<!-- ************************************************************************************************-->
	<!--                                             Run Web Service Client                                          -->
	<!-- ************************************************************************************************-->
	<target name="runWSClient" depends="init-project">
		<javac srcdir="demo/webservice">
			<include name="WSTestClient.java"/>
			<classpath refid="cp"/>
			<classpath>
				<pathelement location="demo/webservice"/>
			</classpath>
		</javac>
		<java classname="WSTestClient" fork="true" maxmemory="512m">
			<classpath>
				<pathelement location="demo/webservice"/>
			</classpath>
			<classpath refid="cp"/>
		</java>
	</target>
	<!-- ************************************************************************************************-->
	<!--                                             clean                                               -->
	<!-- ************************************************************************************************-->
	<target name="clean">
		<antcall target="clean-framework"/>
		<delete dir="output"/>
		<mkdir dir="output"/>
	</target>
	<target name="testos">
		<echo message="${os.name}"/>
	</target>
	<target name="test2" depends="test1">
		<antcall target="init-project"/>
	</target>
	<target name="test1" depends="init-project"/>
	<!-- ************************************************************************************************-->
	<!--                                             Packing  for EVS                                    -->
	<!-- ************************************************************************************************-->
	<target name="create-evs" depends="init-project">
		<echo message="*****************************************************"/>
		<echo message="**   Packing EVS Wars... ...                       **"/>
		<echo message="*****************************************************"/>
		<mkdir dir="output/temp/${project_name}"/>
		<mkdir dir="output/temp/${project_name}/log"/>
		<mkdir dir="output/temp/${project_name}/WEB-INF"/>
		<mkdir dir="output/temp/${project_name}/WEB-INF/lib"/>
		<mkdir dir="output/temp/${project_name}/WEB-INF/classes"/>
		<mkdir dir="output/temp/${project_name}/WEB-INF/conf"/>

		<delete file="output/temp/${project_name}/WEB-INF/conf/DAOConfig.xml"/>
		<copy tofile="output/temp/${project_name}/WEB-INF/conf/DAOConfig.xml">
			<fileset dir="${conf.dir}">
				<include name="DAOConfig-evs.xml"/>
			</fileset>
		</copy>

		<war destfile="output/package/${web_server_name}/cacoreevstest.war" webxml="conf/web.xml" basedir="output/temp/${project_name}" excludes="*.war"/>
		<delete file="output/temp/${project_name}/WEB-INF/conf/DAOConfig.xml"/>
		<copy tofile="output/temp/${project_name}/WEB-INF/conf/DAOConfig.xml">
			<fileset dir="${conf.dir}">
				<include name="DAOConfig-evs2.xml"/>
			</fileset>
		</copy>

		<war destfile="output/package/${web_server_name}/cacoreevstest2.war" webxml="conf/web.xml" basedir="output/temp/${project_name}" excludes="*.war"/>
	</target>
	<!-- ************************************************************************************************-->
	<!--                                  Update Generated Code                                          -->
	<!-- ************************************************************************************************-->
	<target name="update-generated-code" depends="init-project">
		<copy todir="generated-code">
			<fileset dir="output/${project_name}/java">
				<include name="**/**"/>
			</fileset>
			<fileset dir="output/${project_name}/orm/hibernate">
				<include name="**/**"/>
			</fileset>
			<fileset dir="output/${project_name}/conf">
				<include name="**/**"/>
			</fileset>
		</copy>
	</target>
	<!-- ************************************************************************************************-->
	<!--                                  Packing Source Package                                         -->
	<!-- ************************************************************************************************-->
	<target name="pack-cacore" depends="init-project">
		<echo message="*****************************************************"/>
		<echo message="**   Packing Source Package... ...                 **"/>
		<echo message="*****************************************************"/>
		<antcall target="add-license"/>
		<mkdir dir="output/source-pack/${project_name}"/>
		<mkdir dir="output/source-pack/${project_name}/conf"/>
		<mkdir dir="output/source-pack/${project_name}/demo"/>
		<mkdir dir="output/source-pack/${project_name}/lib"/>
		<mkdir dir="output/source-pack/${project_name}/models"/>
		<mkdir dir="output/source-pack/${project_name}/src"/>

		<mkdir dir="output/primary/${project_name}"/>
		<mkdir dir="output/primary/${project_name}/conf"/>
		<mkdir dir="output/primary/${project_name}/lib"/>
		
		<!--  copy ant-1.6.2  -->
		<copy todir="output/source-pack/${project_name}/">
			<fileset dir="${document.dir}">
				<include name="apache-ant-1.6.2-bin.zip"/>
				<include name="caCORE3-1_SOURCE_README.txt"/>
				<include name="oracle-ds.xml"/>
			</fileset>
		</copy>
		<copy todir="output/source-pack/${project_name}/">
			<fileset dir=".">
				<include name="build.xml"/>
				<include name="install-lib.xml"/>
			</fileset>
		</copy>
		<copy todir="output/source-pack/${project_name}/">
			<fileset dir="output/package/${web_server_name}/">
				<include name="${project_name}.war"/>
			</fileset>
		</copy>
		<!-- prepare conf dir -->
		<copy todir="output/source-pack/${project_name}/conf">
			<fileset dir="${conf.dir}">
				<include name="**/**"/>
			</fileset>
		</copy>
		<!-- prepare demo dir -->
		<copy todir="output/source-pack/${project_name}/demo">
			<fileset dir="${demo.dir}">
				<include name="**/**"/>
			</fileset>
		</copy>
		<!-- prepare lib dir -->
		<copy todir="output/source-pack/${project_name}/lib">
			<fileset dir="${lib.dir}">
				<include name="**/**"/>
			</fileset>
		</copy>
		<!-- prepare model dir -->
		<copy todir="output/source-pack/${project_name}/models">
			<fileset dir="${model.eap.dir}">
				<include name="**/**"/>
			</fileset>
		</copy>
		<!-- prepare src dir -->
		<copy todir="output/source-pack/${project_name}/src">
			<fileset dir="${src.java.dir}">
				<include name="**/**"/>
			</fileset>
			<fileset dir="output/${project_name}/java">
				<include name="**/**"/>
			</fileset>
			<fileset dir="output/${project_name}/orm/hibernate">
				<include name="**/**"/>
			</fileset>
		</copy>
		<zip destfile="output/package/${web_server_name}/caCORE3-1_SOURCE.zip" basedir="output/source-pack/${project_name}"/>


		<copy todir="output/primary/${project_name}/">
			<fileset dir="output/package/${web_server_name}/client/">
				<include name="**/**"/>
				<exclude name="README.txt"/>
			</fileset>
			<fileset dir="${document.dir}">
				<include name="apache-ant-1.6.2-bin.zip"/>
			</fileset>
			<fileset dir="${model.eap.dir}">
				<include name="caCORE3-1.eap"/>
			</fileset>
			<fileset dir="${document.dir}">
				<include name="caCORE3-1_README.txt"/>
				<include name="apache0-ant-1.6.2-bin.zip"/>
				<include name="oracle-ds.xml"/>
			</fileset>
		</copy>
		<copy todir="output/primary/${project_name}/lib">
			<fileset dir="${lib.dir}">
				<include name="axis.jar"/>
				<include name="axis-ant.jar"/>
				<include name="commons-discovery.jar"/>
				<include name="dom4j-1.4.jar"/>
				<include name="jaxrpc.jar"/>
				<include name="jmiutils.jar"/>
				<include name="openide-util.jar"/>
				<include name="saaj.jar"/>
				<include name="wsdl4j.jar"/>
				<include name="wsdl4j-1.5.1.jar"/>
				<include name="xerces.jar"/>
				<include name="xercesImpl.jar"/>
			</fileset>
		</copy>
		<zip destfile="output/package/${web_server_name}/caCORE3-1.zip" basedir="output/primary/${project_name}"/>
		<copy todir="output/package/${web_server_name}/">
			<fileset dir="${document.dir}">
				<include name="caCORE3-1_README.txt"/>
				<include name="caCORE3-1_SOURCE_README.txt"/>
			</fileset>
		</copy>
	</target>


	<!-- ************************************************************************************************-->
		<!--                                          Generate EVS Beans                                          -->
		<!-- ************************************************************************************************-->

		<target name="generate-evs-beans" depends="compile-framework,fix-evs-xmi,jetc">
			<antcall target="generate-evs-beans-core"/>
			<antcall target="generate-evs-ws-beans-core"/>
		</target>
		<target name="generate-evs-beans-core">
			<echo message="*****************************************************"/>
			<echo message="**   Generating EVS Beans ... ...                  **"/>
			<echo message="*****************************************************"/>

			<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
								<classpath refid="cp"/>
								<classpath>
									<pathelement location="."/>
									<pathelement location="build"/>
								</classpath>
								<arg value="${properties.dir}/beanevsgeneration.xml"/>
					</java>

<!--
			<javac srcdir="${model.src.dir}" destdir="${model.build.dir}">

						<classpath refid="cp"/>
			</javac>
			<javac srcdir="${model.src.dir}" destdir="${src.java.dir}">

				<classpath refid="cp"/>
			</javac>
			-->

		</target>

        <target name="generate-evs-ws-beans-core">
			<echo message="*****************************************************"/>
			<echo message="**   Generating EVS ws Beans ... ...                  **"/>
			<echo message="*****************************************************"/>

			<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
								<classpath refid="cp"/>
								<classpath>
									<pathelement location="."/>
									<pathelement location="build"/>
								</classpath>
								<arg value="${properties.dir}/beanevswsgeneration.xml"/>
			</java>


			<javac srcdir="${model.src.dir}" destdir="${model.build.dir}">

						<classpath refid="cp"/>
			</javac>

		</target>






	<!-- ************************************************************************************************-->
		<!--                                             Fix EA EVS Model                                        -->
		<!-- ************************************************************************************************-->
		<target name="fix-evs-xmi">
			<antcall target="jar-framework"/>
			<antcall target="fix-evs-xmi-core"/>
		</target>
		<target name="fix-evs-xmi-core">
			<echo message="*****************************************************"/>
			<echo message="**   Fixing EVS Model ... ...                      **"/>
			<echo message="*****************************************************"/>
			<java classname="gov.nih.nci.codegen.core.util.FixXMI" fork="true" maxmemory="512m">
				<classpath refid="cp"/>
				<jvmarg value="-Xmx512m"/>
				<arg value="${xmi_preprocessor}"/>
				<arg value="${model.dir}/${evs_model}"/>
				<arg value="${model.dir}/fixed_${evs_model}"/>
			</java>
		</target>

<!-- ************************************************************************************************ -->
	<!-- ************************************************************************************************ -->
		<!-- ************************************************************************************************-->
			<!--                             Generate deploy.wsdd file with EVS classes                            -->
			<!-- ************************************************************************************************-->
			<target name="generate-wsdd-with-evs" depends="compile-codegen,fix-xmi,generate-evs-package-util,generate-evs-ws-beans-core">
				<antcall target="generate-wsdd-with-evs-core"/>
			</target>

			<target name="generate-wsdd-with-evs-core" depends="init-project">
				<echo message="*****************************************************"/>
				<echo message="**   Generating deploy.wsdd file with EVS classes   **"/>
				<echo message="*****************************************************"/>
				<java classname="gov.nih.nci.codegen.core.GeneratorImpl" fork="true" maxmemory="512m">
					<classpath refid="cp"/>
					<classpath>
						<pathelement location="."/>
						<pathelement location="build"/>
					</classpath>
					<arg value="${properties.dir}/wsddEVSUtil.xml"/>
				</java>
			</target>
			<copy todir="output/${project_name}/conf" overwrite="true">
				<fileset dir="${conf.dir}">
					<include name="wsddEVSUtil.xml"/>
					<include name="undeploy.wsdd" />
				</fileset>
				<filterset>
					<filter token="LOGICAL_MODEL" value="${model.dir}/${fixed_filename}"/>
					<filter token="INCLUDE_PACKAGE" value="${include_package}"/>
					<filter token="EXCLUDE_PACKAGE" value="${exclude_package}"/>
					<filter token="EXCLUDE_NAME" value="${exclude_name}"/>
					<filter token="OUTPUTDIR" value="${output.dir}"/>
					<filter token="WEBSERVICENAME" value="${webservice_name}"/>
				</filterset>
			</copy>
<!-- ************************************************************************************************-->



</project>
