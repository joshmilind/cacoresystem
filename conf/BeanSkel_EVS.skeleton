import java.util.*;
import org.omg.uml.foundation.core.*;
import org.omg.uml.modelmanagement.*;
import org.omg.uml.foundation.datatypes.*;
import gov.nih.nci.codegen.core.*;
import gov.nih.nci.codegen.core.transformer.*;
import gov.nih.nci.codegen.core.transformer.template.*;
import gov.nih.nci.codegen.core.filter.*;
import gov.nih.nci.codegen.core.handler.*;
import gov.nih.nci.codegen.core.access.*;
import gov.nih.nci.codegen.core.util.*;
import org.omg.uml.modelmanagement.UmlPackage;
import org.omg.uml.foundation.core.*;
import org.omg.uml.foundation.core.AssociationEnd;
import org.omg.uml.foundation.core.Attribute;
import org.omg.uml.foundation.core.Classifier;
import org.omg.uml.foundation.core.Dependency;
import org.omg.uml.foundation.core.ModelElement;
import org.omg.uml.foundation.core.Operation;
import org.omg.uml.foundation.core.Parameter;
import org.omg.uml.foundation.core.UmlAssociation;
import org.omg.uml.foundation.core.UmlClass;
import org.omg.uml.foundation.extensionmechanisms.Stereotype;
import org.omg.uml.foundation.extensionmechanisms.TaggedValue;
import org.omg.uml.modelmanagement.UmlPackage;

public class CLASS implements JETTemplate{
        private String _omPkg, _dmPkg;
	public String capFirst(String s){
		return s.substring(0, 1).toUpperCase() + s.substring(1);
	}
	public String uncapFirst(String s){
		return s.substring(0, 1).toLowerCase() + s.substring(1);
	}
	private String getPackage(UmlClass klass) {
		        UmlPackage pkg = null;
		        pkg = UML13Utils.getModel(klass);
		        return UML13Utils.getNamespaceName(pkg, klass);
        }
	public String getGetterName(AssociationEnd ae){
		String name = ae.getName();
		if(name == null || name.trim().length() == 0){
			name = ae.getType().getName();
		}
		return "get" + capFirst(name);
	}
	public String getSetterName(AssociationEnd ae){
		String name = ae.getName();
		if(name == null || name.trim().length() == 0){
			name = ae.getType().getName();
		}
		return "set" + capFirst(name);
	}
	
	public boolean extendsOntology(Classifier klass) {
	boolean extendsOntology = false;
	TaggedValue ontologyTag = UML13Utils.getTaggedValue(klass,"implements-ontology");
	if (ontologyTag!=null) {
		if (ontologyTag.getValue().equals("yes")) {
	 	 extendsOntology=true;
		}
	}
	return extendsOntology;
	}
	
	public boolean extendsOntologyRelationship(Classifier klass) {
	boolean extendsOntologyRelationship = false;
		TaggedValue ontologyRelationshipTag = UML13Utils.getTaggedValue(klass,"implements-ontologyRelationship");
		if (ontologyRelationshipTag!=null) {
			if (ontologyRelationshipTag.getValue().equals("yes")) {
		 	 extendsOntologyRelationship=true;
			}
		}
		return extendsOntologyRelationship;
	}
	
	
	public String getQualifiedName(ModelElement me, String basePkg){

	String qName = null;
        UmlPackage pkg = null;
        if (basePkg != null) {
            pkg = UML13Utils.getPackage(UML13Utils.getModel(me), basePkg);
        } else {
            pkg = UML13Utils.getModel(me);
        }
        qName = UML13Utils.getNamespaceName(pkg, me) + "." + me.getName();
        return qName;		
	}
	
	
	public String getWSQualifiedName(ModelElement me, String basePkg){

	String qName = null;
        UmlPackage pkg = null;
        if (basePkg != null) {
            pkg = UML13Utils.getPackage(UML13Utils.getModel(me), basePkg);
        } else {
            pkg = UML13Utils.getModel(me);
        }
        qName = UML13Utils.getNamespaceName(pkg, me) + ".ws." + me.getName();
        return qName;		
	}
	
	
	public String getMetaphraseValue(Classifier klass){
	
	
	TaggedValue assEndType = null;
	String value = "False";
	
	if(UML13Utils.getTaggedValue(klass, "metaphrase")!=null){
		assEndType = UML13Utils.getTaggedValue(klass, "metaphrase");
		value = assEndType.getValue();
	}
		
	return value;
	}
	
	public String getDeprecateValue(Attribute att){
		TaggedValue attTag = null;
		String deprecate = "false";
		
		if(UML13Utils.getTaggedValue(att, "depricate-method")!=null){
			attTag = UML13Utils.getTaggedValue(att, "depricate-method");
			deprecate = attTag.getValue();
		}
			
		return deprecate;
	
	}
	public String getDeprecateJavaDoc(Attribute att){
		StringBuffer doc = new StringBuffer();
		doc.append("\n\t/**\n\t*");
		doc.append(" @deprecated  - The preffered way to do this is by using the "+ "get"+ capFirst(att.getName())+ " method");
		doc.append("\n\t*/");
		return doc.toString();
	
	}
	
	public String getDeprecateJavaDoc(AssociationEnd assEnd){
			UmlAssociation ass = assEnd.getAssociation();
			TaggedValue opTag = null;
			StringBuffer sb = new StringBuffer();
			sb.append("\n\t/**\n\t*");
			String doc = null;
						
			if(UML13Utils.getTaggedValue(ass, "deprecated")!=null){
				opTag = UML13Utils.getTaggedValue(ass, "deprecated");
				StringTokenizer st = new StringTokenizer(opTag.getValue(),".");
				while(st.hasMoreTokens()){
					sb.append((String)st.nextToken() +".\n\t*");
				}
				sb.append("\n*/");
				doc = sb.toString();
			}
		return doc;	
	}
	
	public String getDeprecateValue(AssociationEnd assEnd){
		UmlAssociation ass = assEnd.getAssociation();
		TaggedValue opTag = null;
		String deprecate = "false";
					
		if(UML13Utils.getTaggedValue(ass, "deprecate-method")!=null){
			opTag = UML13Utils.getTaggedValue(ass, "deprecate-method");
			deprecate = opTag.getValue();
		}
		return deprecate;
	}
	
	public String getDeprecateMethod(AssociationEnd assEnd){
		UmlAssociation ass = assEnd.getAssociation();
		TaggedValue opTag = null;
		String methodName = null;
		String returnType = "void";
		String paraName = null;
		String paraType = "java.lang.String";
		String methodBody = null;
		String javaDoc = "\n\t/** \n\t* ";
		StringBuffer method = new StringBuffer();
		if(UML13Utils.getTaggedValue(ass, "deprecate-method-name")!=null){
				opTag = UML13Utils.getTaggedValue(ass, "deprecate-method-name");
				methodName = opTag.getValue();
		}
		if(UML13Utils.getTaggedValue(ass, "deprecate-parameter-name")!=null){
				opTag = UML13Utils.getTaggedValue(ass, "deprecate-parameter-name");
				paraName = opTag.getValue();
		}
		if(UML13Utils.getTaggedValue(ass, "deprecate-parameter-type")!=null){
				opTag = UML13Utils.getTaggedValue(ass, "deprecate-parameter-type");
				paraType = opTag.getValue();
		}
		if(UML13Utils.getTaggedValue(ass, "deprecate-return-type")!=null){
				opTag = UML13Utils.getTaggedValue(ass, "deprecate-return-type");
				returnType = opTag.getValue();
		}
		if(UML13Utils.getTaggedValue(ass, "deprecate-method-body")!=null){
				opTag = UML13Utils.getTaggedValue(ass, "deprecate-method-body");
				methodBody = opTag.getValue();
		}
		if(UML13Utils.getTaggedValue(ass, "deprecate-documentation")!=null){
				opTag = UML13Utils.getTaggedValue(ass, "deprecate-documentation");
				javaDoc += opTag.getValue() + "\n\t*/\n";
		}
		
		
		
		
		method.append(javaDoc);
		method.append("\tpublic"+" "+returnType+" "+methodName +"("+ paraType +" "+ paraName +"){\n\t\t");
		
		StringTokenizer st = new StringTokenizer(methodBody,";");
			while(st.hasMoreTokens()){
				String text = (String) st.nextToken();
				method.append(text +";\n\t\t");
			}
			method.append("\n\t\t}");
		return method.toString();
		
	}
	public String getIsStaticConstant(Attribute att){
		TaggedValue attTag = null;
		String constValue = "false";
				
		if(UML13Utils.getTaggedValue(att, "final-static-constant")!=null){
			attTag = UML13Utils.getTaggedValue(att, "final-static-constant");
			constValue = attTag.getValue();
		}
					
		return constValue;

	}
	
	public String getConstValue(Attribute att){
		TaggedValue attTag = null;
		String constValue = "0";
					
			if(UML13Utils.getTaggedValue(att, "constant-value")!=null){
				attTag = UML13Utils.getTaggedValue(att, "constant-value");
				constValue = attTag.getValue();
			}
						
		return constValue;
	}
	
	public String getCreateMethod(AssociationEnd asEnd){	
		UmlAssociation ass = asEnd.getAssociation();
		TaggedValue opTag = null;
			String create = "true";
			
			if(UML13Utils.getTaggedValue(ass, "create-method")!=null){
				opTag = UML13Utils.getTaggedValue(ass, "create-method");
				create = opTag.getValue();
			}
				
		return create;
	}
	
	public Attribute getIdAtt(UmlClass klass){
		Attribute idAtt = null;
		UmlClass superClass = klass;
		while(superClass != null && idAtt == null){
			idAtt = UML13Utils.getAttribute(superClass, "id");
			superClass = UML13Utils.getSuperClass(superClass);
		}
		return idAtt;
	}
	
	public Attribute getKeyAtt(UmlClass klass){
		Attribute keyAtt = null;
		TaggedValue keyTag = null;
		String value = "false";
		
		for(Iterator i = UML13Utils.getAttributes((UmlClass)klass).iterator(); i.hasNext();){
			keyAtt = (Attribute)i.next();
			if(UML13Utils.getTaggedValue(keyAtt, "key-field")!=null){
				keyTag = UML13Utils.getTaggedValue(keyAtt, "key-field");
				if(keyTag.getValue().equalsIgnoreCase("true")){
					value = keyTag.getValue();
					break;
				}
			}
		}
		
		return keyAtt;		
	}
	
	public String getConstructorValue(Classifier klass){
		TaggedValue tag = null;
		String isConstructor = "false";
		if(UML13Utils.getTaggedValue(klass, "constructor") != null){
			tag = UML13Utils.getTaggedValue(klass, "constructor");
			isConstructor = tag.getValue();
		}
		return isConstructor;
	}
	public String getConstructor(Classifier klass){
		StringBuffer method = new StringBuffer();		
		
		String paramType = null;
		String paramName = null;
		
		if(UML13Utils.getTaggedValue(klass, "constructor-parameter-type") != null){
			paramType = UML13Utils.getTaggedValue(klass, "constructor-parameter-type").getValue();
			
		}
		if(UML13Utils.getTaggedValue(klass, "constructor-parameter-name") != null){
			paramName = UML13Utils.getTaggedValue(klass, "constructor-parameter-name").getValue();
			}

		method.append("public "+ klass.getName()+ "("+ paramType +" "+ paramName +"){\n");
		method.append("\tthis."+paramName +" = "+ paramName +";\n}");
		
		return method.toString();
	}
	
	public boolean isPrimitive(String typeName)
	{
		if (typeName.equals("int"))
		{
			return true;
		}
		if (typeName.equals("long"))
		{
			return true;
		}
		if (typeName.equals("double"))
		{
			return true;
		}		
		if (typeName.equals("float"))
		{
			return true;
		}		
		return false;
	}

	public String execute(Map context){
		return generate(context);
	}
	
	public String generate(Map context){
		return "";
	}
	
	

}