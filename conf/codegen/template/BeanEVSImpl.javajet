<%@ jet package="gov.nih.nci.codegen.core.template.jet" 
        class="BeanEVSImpl"
        skeleton="BeanSkel_EVS.skeleton" %>

<%
Classifier klass = (Classifier)context.get("modelElement");
String basePkg = (String)context.get("basePackage");
String basePkg1 = null;
String isAbstract = new String();

if (klass.isAbstract()) {
  isAbstract="abstract";
} 
if (isAbstract.equals("abstract")){
   
}
%>

package <%=UML13Utils.getNamespaceName(UML13Utils.getPackage(UML13Utils.getModel(klass), basePkg), klass)%>;

import java.util.*;
import gov.nih.nci.system.applicationservice.*;

import org.apache.log4j.Logger;
import gov.nih.nci.evs.query.EVSQuery;
import gov.nih.nci.evs.query.EVSQueryImpl;

<%
if(klass.getName().endsWith("Vocabulary")){
%>
import gov.nih.nci.evs.security.*;
<%
}
%>

/**
 * <!-- LICENSE_TEXT_START -->
 * <!-- LICENSE_TEXT_END -->
 */
 
<%=UML13JavaSourceHelper.getClassJavadoc(klass)%>

public <% if (isAbstract.equals("abstract")) {%> <%=isAbstract%><%}%> class <%=klass.getName()%>
<% UmlClass superClass = UML13Utils.getSuperClass((UmlClass)klass); %>
<% if(superClass != null){ %>
    extends <%=superClass.getName()%>
<% } %>
	implements java.io.Serializable
{
	private static final long serialVersionUID = 1234567890L;
	<%if(getConstructorValue(klass).equalsIgnoreCase("true")){%>
	<%=getConstructor(klass)%>;	<%}%>	
	<% for(Iterator i = UML13Utils.getAttributes((UmlClass)klass).iterator(); i.hasNext();){ %>
	   <% Attribute att = (Attribute)i.next(); %>
	 /**
	 * <%if(UML13Utils.getTaggedValue(att,"documentation")!=null){%><%=UML13Utils.getTaggedValue(att,"documentation").getValue()%><%}%>	   
	 */
	   <%if(getIsStaticConstant(att).equalsIgnoreCase("true")){
	   	String constValue = getConstValue(att);
	   	%>
	public static final  <% if(getQualifiedName(att.getType(), basePkg).startsWith(".")){%><%=getQualifiedName(att.getType(), basePkg).substring(1)%> <%=att.getName()%>= <%=constValue%>;<%} else {%><%=getQualifiedName(att.getType(), basePkg)%> <%=att.getName()%> = <%=constValue%>;<%}%> 
	   <% }else{%>	
	<%if(getQualifiedName(att.getType(), basePkg).endsWith("Vector")){%>	<%=att.getVisibility().toString().substring(3)%> <%if(getQualifiedName(att.getType(), basePkg).startsWith(".")){%><%=getQualifiedName(att.getType(), basePkg).substring(1)%> <%=att.getName()%> = new Vector();<%} else {%><%=getQualifiedName(att.getType(), basePkg)%> <%=att.getName()%> = new Vector();<%}%>	   
	   <%}%><%else{%>
	<%=att.getVisibility().toString().substring(3)%> <%if(getQualifiedName(att.getType(), basePkg).startsWith(".")){%><%=getQualifiedName(att.getType(), basePkg).substring(1)%> <%=att.getName()%>;<%} else {%><%=getQualifiedName(att.getType(), basePkg)%> <%=att.getName()%>;<%}%>	   
	   <%}%>
	<%if(UML13Utils.getTaggedValue(att,"deprecated")!=null){%>
	/**
	* <%=UML13Utils.getTaggedValue(att,"deprecated").getValue()%>
	*/
	<%}%>  
	/**
	* <%if(UML13Utils.getTaggedValue(att,"documentation-get-method")!=null){%><%=UML13Utils.getTaggedValue(att,"documentation-get-method").getValue()%><%}%>	   
	* @return - <%=att.getName()%>
	*/
	public <%if(getQualifiedName(att.getType(), basePkg).startsWith(".")){%><%=getQualifiedName(att.getType(), basePkg).substring(1)%><%} else { %> <%=getQualifiedName(att.getType(),basePkg)%><%}%> get<%=capFirst(att.getName())%>(){
	<%if(UML13Utils.getTaggedValue(att,"lazy_load")!=null){
		if(UML13Utils.getTaggedValue(att,"lazy_load").getValue().equalsIgnoreCase("true")){%>
		
			if (<%=att.getName()%>==null){
			try{
				ApplicationService appService = ApplicationService.getInstance();
				EVSQuery evsQuery = new EVSQueryImpl(); 
				<% Attribute keyAtt = getKeyAtt((UmlClass)klass);
				String keyAttName = keyAtt.getName();
				if(klass.getName().equals("DescLogicConcept")){
				%>
				evsQuery.get<%=capFirst(att.getName())%>by<%=capFirst(keyAttName)%>(namespaceId, <%=keyAttName%>);
				<%}else{%>
				evsQuery.get<%=capFirst(att.getName())%>by<%=capFirst(keyAttName)%>(<%=keyAttName%>);
				<%}%>
	    		List resultList = (List)appService.evsSearch(evsQuery);	
	    		<%if(getQualifiedName(att.getType(), basePkg).endsWith("Vector")){%>
	    		<%=att.getName()%> = (Vector)resultList;
	    		<%}else{%>			
				<%=att.getName()%> = (ArrayList)resultList;
				<%}%>
    		}catch(Exception ex) 
			{
				Logger log = Logger.getLogger("<%=klass.getName()%>");
				log.error("get<%=capFirst(att.getName())%> throws exception ... ...",ex);
			}
    	}
		<%}
		}%>	
	      return <%=att.getName()%>;
	      }   
	   <% if(getDeprecateValue(att).equalsIgnoreCase("true")){%>	  
	<%=getDeprecateJavaDoc(att)%>
	public <%if(getQualifiedName(att.getType(), basePkg).startsWith(".")){%><%=getQualifiedName(att.getType(), basePkg).substring(1)%><%} else { %> <%=getQualifiedName(att.getType(),basePkg)%><%}%> <%=att.getName()%>(){
	<%if(UML13Utils.getTaggedValue(att,"lazy_load")!=null){
		if(UML13Utils.getTaggedValue(att,"lazy_load").getValue().equalsIgnoreCase("true")){%>
		
			if (<%=att.getName()%>==null){
			try{
				ApplicationService appService = ApplicationService.getInstance();
				EVSQuery evsQuery = new EVSQueryImpl(); 
				<% Attribute keyAtt = getKeyAtt((UmlClass)klass);
				String keyAttName = keyAtt.getName();
				if(klass.getName().equals("DescLogicConcept")){
				%>
				evsQuery.get<%=capFirst(att.getName())%>by<%=capFirst(keyAttName)%>(namespaceId, <%=keyAttName%>);
				<%}else{%>
				evsQuery.get<%=capFirst(att.getName())%>by<%=capFirst(keyAttName)%>(<%=keyAttName%>);
				<%}%>
	    		List resultList = (List)appService.evsSearch(evsQuery);				
				<%=att.getName()%> = (ArrayList)resultList;
    		}catch(Exception ex) 
			{
				Logger log = Logger.getLogger("<%=klass.getName()%>");
				log.error("get<%=capFirst(att.getName())%> throws exception ... ...",ex);
			}
    	}
		<%}
		}%>
	
	   	      return <%=att.getName()%>;
	   	   }	   	   
	   <%  }   %>		
	/**
	* <%if(UML13Utils.getTaggedValue(att,"documentation-set-method")!=null){%><%=UML13Utils.getTaggedValue(att,"documentation-set-method").getValue()%><%}%>	   
	* @param - <%=att.getName()%>
	*/
	public void set<%=capFirst(att.getName())%>(<% if(getQualifiedName(att.getType(), basePkg).startsWith(".")) {%><%=getQualifiedName(att.getType(), basePkg).substring(1)%> <%=att.getName()%>)<%} else {%> <%=getQualifiedName(att.getType(), basePkg)%> <%=att.getName()%>)<% } %>{
	      this.<%=att.getName()%> = <%=att.getName()%>;
	   }	   
	<% } } %>
	<% for(Iterator i = UML13Utils.getAssociationEnds(klass).iterator(); i.hasNext();){%>
	   <% AssociationEnd thisEnd = (AssociationEnd)i.next(); %>
	   <% AssociationEnd otherEnd = (AssociationEnd)UML13Utils.getOtherAssociationEnd(thisEnd); %>	
	   <% UmlAssociation asso = null;%>
	   <% if(otherEnd.getAssociation()!=null){ asso = otherEnd.getAssociation();}%>
	   <% if(otherEnd.isNavigable() && !getCreateMethod(otherEnd).equalsIgnoreCase("false")){ %>
	      <% if(UML13Utils.isMany2Many(thisEnd, otherEnd) || UML13Utils.isOne2Many(thisEnd, otherEnd)){ %>	      		
	      		<%if(getMetaphraseValue(klass).equalsIgnoreCase("true")){%>
	private java.util.ArrayList <%=otherEnd.getName()%> = new java.util.ArrayList();
	/**
	* <%if(UML13Utils.getTaggedValue(asso,"otherend-get-method")!=null){%><%=UML13Utils.getTaggedValue(asso,"otherend-get-method").getValue()%><%}%>	   
	* @return - <%=otherEnd.getName()%>
	*/
	public java.util.ArrayList get<%=capFirst(otherEnd.getName())%>(){
	<%if(UML13Utils.getTaggedValue(asso,"lazy_load")!=null){
		if(UML13Utils.getTaggedValue(asso,"lazy_load").getValue().equalsIgnoreCase("true")){%>
		if (<%=otherEnd.getName()%>==null){
			try{
				ApplicationService appService = ApplicationService.getInstance();
				EVSQuery evsQuery = new EVSQueryImpl(); 
				<% Attribute keyAtt = getKeyAtt((UmlClass)klass);
				String keyAttName = keyAtt.getName();
				if(klass.getName().equals("DescLogicConcept")){
				%>
				evsQuery.get<%=capFirst(otherEnd.getName())%>by<%=capFirst(keyAttName)%>(namespaceId, <%=keyAttName%>);
				<%}else{%>
				evsQuery.get<%=capFirst(otherEnd.getName())%>by<%=capFirst(keyAttName)%>(<%=keyAttName%>);
				<%}%>
	    		List resultList = (List)appService.evsSearch(evsQuery);				
				<%=otherEnd.getName()%> = (ArrayList)resultList;
    		}catch(Exception ex) 
			{
				Logger log = Logger.getLogger("<%=klass.getName()%>");
				log.error("get<%=capFirst(otherEnd.getName())%> throws exception ... ...",ex);
			}
    	}
    	<%}
    	}%>
		return <%=otherEnd.getName()%>;	
	}
	      		<%}else	{%>
	private java.util.Vector <%=otherEnd.getName()%> = new java.util.Vector();
	/**
	* <%if(UML13Utils.getTaggedValue(asso,"otherend-get-method")!=null){%><%=UML13Utils.getTaggedValue(asso,"otherend-get-method").getValue()%><%}%>	   
	* @return - <%=otherEnd.getName()%>
	*/
	public java.util.Vector get<%=capFirst(otherEnd.getName())%>(){
	<%if(UML13Utils.getTaggedValue(asso,"lazy_load")!=null){
		if(UML13Utils.getTaggedValue(asso,"lazy_load").getValue().equalsIgnoreCase("true")){%>
		if (<%=otherEnd.getName()%>==null){
			try{
				ApplicationService appService = ApplicationService.getInstance();
				EVSQuery evsQuery = new EVSQueryImpl();
				<% Attribute keyAtt = getKeyAtt((UmlClass)klass);
				String keyAttName = keyAtt.getName();
				if(klass.getName().equals("DescLogicConcept")){
				%>
				evsQuery.get<%=capFirst(otherEnd.getName())%>by<%=capFirst(keyAttName)%>(namespaceId, <%=keyAttName%>);
				<%}else{%>
				evsQuery.get<%=capFirst(otherEnd.getName())%>by<%=capFirst(keyAttName)%>(<%=keyAttName%>);
				<%}%>
	    		List resultList = (List)appService.evsSearch(evsQuery);				 
				<%=otherEnd.getName()%> = (java.util.Vector)resultList;
    		}catch(Exception ex) 
			{
				Logger log = Logger.getLogger("<%=klass.getName()%>");
				log.error("get<%=capFirst(otherEnd.getName())%> throws exception ... ...",ex);
			}
    	}
    	<%}
    	}%>
		return <%=otherEnd.getName()%>;
	}
	              	<%}%>  
	      <% } else if( UML13Utils.isMany2One(thisEnd, otherEnd) ){ %>			
			<%
			String fullInterfaceName=getQualifiedName(otherEnd.getType(), basePkg);
		        String implName=fullInterfaceName.substring(fullInterfaceName.lastIndexOf(".")+1);
			String fullBeanName = fullInterfaceName.substring(0, fullInterfaceName.lastIndexOf("."))+"."+implName;
			%>
	private <%=fullBeanName%> <%=otherEnd.getName()%>;
	/**
	* <%if(UML13Utils.getTaggedValue(asso,"otherend-get-method")!=null){%><%=UML13Utils.getTaggedValue(asso,"otherend-get-method").getValue()%><%}%>	   
	* @return - <%=otherEnd.getName()%>
	*/
	public <%=fullBeanName%> get<%=capFirst(otherEnd.getName())%>(){
		<%if(UML13Utils.getTaggedValue(asso,"lazy_load")!=null){
		 	if(UML13Utils.getTaggedValue(asso,"lazy_load").getValue().equalsIgnoreCase("true")){%>
		if (<%=otherEnd.getName()%>==null){
			try{
				ApplicationService appService = ApplicationService.getInstance();
				EVSQuery evsQuery = new EVSQueryImpl();
				<% Attribute keyAtt = getKeyAtt((UmlClass)klass);
				String keyAttName = keyAtt.getName();
				if(klass.getName().equals("DescLogicConcept")){
				%>
					evsQuery.get<%=capFirst(otherEnd.getName())%>by<%=capFirst(keyAttName)%>(namespaceId, <%=keyAttName%>);
				<%}else{%>
					evsQuery.get<%=capFirst(otherEnd.getName())%>by<%=capFirst(keyAttName)%>(<%=keyAttName%>);
				<%}%>
		    		List resultList = (List)appService.evsSearch(evsQuery);				 
				if (resultList!=null && resultList.size()>0) 
					<%=otherEnd.getName()%> = (<%=fullBeanName%>)resultList.get(0);
				else
					<%=otherEnd.getName()%> = null;
	    		}catch(Exception ex) 
				{
					Logger log = Logger.getLogger("<%=klass.getName()%>");
					log.error("get<%=capFirst(otherEnd.getName())%> throws exception ... ...",ex);
				}
	    	}
		 	
		 	<%}
		}
		%>
		return <%=otherEnd.getName()%>;		
        }		   
	      <% }else if(UML13Utils.isOne2One(thisEnd, otherEnd)){ %>
			<%
			String fullInterfaceName=getQualifiedName(otherEnd.getType(), basePkg);
		        String implName=fullInterfaceName.substring(fullInterfaceName.lastIndexOf(".")+1);
			String fullBeanName = fullInterfaceName.substring(0, fullInterfaceName.lastIndexOf("."))+"."+implName;
			%>
	private <%=fullBeanName%> <%=otherEnd.getName()%>;
	<%if(getDeprecateJavaDoc(otherEnd)!=null){%>
	<%=getDeprecateJavaDoc(otherEnd)%>
	<%}%>
	public <%=fullBeanName%> get<%=capFirst(otherEnd.getName())%>(){
		<%if(UML13Utils.getTaggedValue(asso,"lazy_load")!=null){
			if(UML13Utils.getTaggedValue(asso,"lazy_load").getValue().equalsIgnoreCase("true")){%>
		if (<%=otherEnd.getName()%>==null){
			try{
				ApplicationService appService = ApplicationService.getInstance();
				EVSQuery evsQuery = new EVSQueryImpl();
				<% Attribute keyAtt = getKeyAtt((UmlClass)klass);
				String keyAttName = keyAtt.getName();
				if(klass.getName().equals("DescLogicConcept")){
				%>
				evsQuery.get<%=capFirst(otherEnd.getName())%>by<%=capFirst(keyAttName)%>(namespaceId, <%=keyAttName%>);
				<%}else{%>
				evsQuery.get<%=capFirst(otherEnd.getName())%>by<%=capFirst(keyAttName)%>(<%=keyAttName%>);
				<%}%>				
	    		List resultList = (List)appService.evsSearch(evsQuery);				 
				if (resultList!=null && resultList.size()>0) 
					<%=otherEnd.getName()%> = (<%=fullBeanName%>)resultList.get(0);
				else
					<%=otherEnd.getName()%> = null;		
    		}catch(Exception ex) 
			{
				Logger log = Logger.getLogger("<%=klass.getName()%>");
				log.error("get<%=capFirst(otherEnd.getName())%> throws exception ... ...",ex);
			}
    	 	}
			 	
			<%}
		}%>

		return <%=otherEnd.getName()%>;
       	}                        
	      <% }else{ %>
		     <% if(true) throw new RuntimeException("Unknown association multiplicity: " + thisEnd.getType().getName() + "." + thisEnd.getName() + ".upper=" + ((MultiplicityRange)thisEnd.getMultiplicity().getRange().iterator().next()).getUpper() + ", " + otherEnd.getType().getName() + "." + otherEnd.getName() + ".upper=" + ((MultiplicityRange)otherEnd.getMultiplicity().getRange().iterator().next()).getUpper()); %>
	      <% } %>
	<%if(getDeprecateValue(otherEnd).equalsIgnoreCase("true")){ 	%>
	<%=getDeprecateMethod(otherEnd)%>
	<%}%>     
	<% if(UML13Utils.isMany2Many(thisEnd, otherEnd) || UML13Utils.isOne2Many(thisEnd, otherEnd)){ %>	   
	   	<%
	   	if(getMetaphraseValue(klass).equalsIgnoreCase("true")){
	   	%>
	/**
	* <%if(UML13Utils.getTaggedValue(asso,"otherend-set-method")!=null){%><%=UML13Utils.getTaggedValue(asso,"otherend-set-method").getValue()%><%}%>	   
	* @param - <%=otherEnd.getName()%>
	*/

	public void set<%=capFirst(otherEnd.getName())%>(java.util.ArrayList <%=otherEnd.getName()%>){
	   	<% }else {%>
	/**
	* <%if(UML13Utils.getTaggedValue(asso,"otherend-set-method")!=null){%><%=UML13Utils.getTaggedValue(asso,"otherend-set-method").getValue()%><%}%>	   
	* @return - <%=otherEnd.getName()%>
	*/

	public void set<%=capFirst(otherEnd.getName())%>(java.util.Vector <%=otherEnd.getName()%>){
	   	<%}%>
	   	this.<%=otherEnd.getName()%> = <%=otherEnd.getName()%>;
	        }	
	   <% } else if(UML13Utils.isMany2One(thisEnd, otherEnd) || UML13Utils.isOne2One(thisEnd, otherEnd)){ %>	   
	   <%  			String fullInterfaceName=getQualifiedName(otherEnd.getType(), basePkg);
	   		        String implName=fullInterfaceName.substring(fullInterfaceName.lastIndexOf(".")+1);
	   			String fullBeanName = fullInterfaceName.substring(0, fullInterfaceName.lastIndexOf("."))+"."+implName;
			%>
	/**
	* <%if(UML13Utils.getTaggedValue(asso,"otherend-set-method")!=null){%><%=UML13Utils.getTaggedValue(asso,"otherend-set-method").getValue()%><%}%>	   
	* @param - <%=otherEnd.getName()%>
	*/
		
	public void set<%=capFirst(otherEnd.getName())%>(<%=fullBeanName%> <%=otherEnd.getName()%>){
		this.<%=otherEnd.getName()%> = <%=otherEnd.getName()%>;
	}	
	<% } %>
	<% }else{//end if otherEnd.isNavigable() %>
	<% if(otherEnd.getAggregation().equals(AggregationKindEnum.AK_AGGREGATE)){ %>
	private Long <%=otherEnd.getName()%>Id;
	public Long get<%=capFirst(otherEnd.getName())%>Id(){
		if (<%=otherEnd.getName()%>==null){
			try{
				ApplicationService appService = ApplicationService.getInstance();
				EVSQuery evsQuery = new EVSQueryImpl();
				<% Attribute keyAtt = getKeyAtt((UmlClass)klass);
				String keyAttName = keyAtt.getName();
				if(klass.getName().equals("DescLogicConcept")){
				%>
				evsQuery.get<%=capFirst(otherEnd.getName())%>Idby<%=capFirst(keyAttName)%>(namespaceId, <%=keyAttName%>);
				<%}else{%>
				evsQuery.get<%=capFirst(otherEnd.getName())%>Idby<%=capFirst(keyAttName)%>(<%=keyAttName%>);
				<%}%>
	    		List resultList = (List)appService.evsSearch(evsQuery);				 
				if (resultList!=null && resultList.size()>0) 
					<%=otherEnd.getName()%> = (Long)resultList.get(0);
				else
					<%=otherEnd.getName()%> = null;		
    		}catch(Exception ex) 
			{
				Logger log = Logger.getLogger("<%=klass.getName()%>");
				log.error("get<%=capFirst(otherEnd.getName())%> throws exception ... ...",ex);
			}
    	}
	    return <%=otherEnd.getName()%>Id;
	}
	      <% } %><% } %><% } %>
	public boolean equals(Object obj){
		boolean eq = false;
		if(obj instanceof <%=klass.getName() %>) {
			<%=klass.getName() %> c =(<%=klass.getName() %>)obj;
				<% Attribute keyAtt = getKeyAtt((UmlClass)klass);
				String methodName = "get" + capFirst(keyAtt.getName());	%>				
				<%=keyAtt.getType().getName()%> thisKey =  <%=methodName%>();			
				if(thisKey!= null && thisKey.equals(c.<%=methodName%>())) {
					eq = true;
				}		
				
			}
			return eq;
		}
		

	public int hashCode(){
		int h = 0;					
		if(<%=methodName%>() != null) {
			h += <%=methodName%>().hashCode();
		}
		return h;
	}
}
