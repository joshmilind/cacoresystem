<?xml version="1.0" encoding="UTF-8"?>
<project name="caCORESDKCustom">
	<!--***********************************************************************
	*** CONDITIONAL PROPERTIES
	*********************************************************************** -->
	<condition property="fix-xmi-yes-custom">
		<and>
			<istrue value="${fix-xmi-yes}" />
			<istrue value="${fix-xmi.custom.use}" />
		</and>
	</condition>
	<condition property="generate_index_yes">
		<equals arg1="${generate_index}" arg2="yes" casesensitive="false" trim="true" />
	</condition>

	
	<!--***********************************************************************
	*** Initialization and Cleanup
	*********************************************************************** -->

	<target name="-clean.custom" if="clean.custom.use">
		<echo> Cleaning custom libs in ${dir.lib}</echo>
		<delete file="${dir.lib}/lb*.jar" />
		<delete file="${dir.lib}/dtsrpc*.jar" />
		<delete file="${dir.lib}/lex*.jar" />
		<delete file="${dir.lib}/MSSOU*.jar" />
	</target>
		
	<target name="-clean-generator.custom" if="clean-framework.custom.use" />
	<target name="-create-output-dirs.custom" if="create-output-dirs.custom.use" />
	
	<target name="-init-project.custom" if="init-project.custom.use">
		<SDKecho message="Copying files required by caCORE API to SDK directory" />
		<copy todir="${dir.model}" overwrite="no" failonerror="false">
			<fileset dir="${dir.custom.model}">
				<include name="${fixed_filename}" />
				<include name="${fixed_evs_model_filename}" />
			</fileset>
		</copy>
		
		<copy todir="models" overwrite="no" failonerror="false">
			<fileset dir="${dir.custom}/models">
				<include name="caCORE*" />
			</fileset>
		</copy>
		<copy todir="${dir.conf.webservice}" overwrite="yes" failonerror="false">
			<fileset dir="${dir.custom.wsdd}">
				<include name="${file.server.config.wsdd}" />
			</fileset>
		</copy>
		<copy todir="${dir.output.project.src}" overwrite="yes" failonerror="false">
			<fileset dir="${dir.custom.framework.src}">
				<include name="**/evs/domain/*.java" />
				<include name="**/evs/query/*.java" />
				<include name="**/evs/domain/ws/*.java" />
				<include name="**/evs/service/*.java" />
				<include name="**/*.java" />
			</fileset>
		</copy>
		<copy todir="${dir.output.project.src}" overwrite="yes" failonerror="false">
			<fileset dir="${dir.custom.framework.src}">
				<include name="**/common/util/*.java" />
				<include name="**/system/applicationservice/impl/*.java" />
				<include name="**/system/applicationservice/*.java" />
				<include name="**/comm/common/*.java" />
				<include name="**/comm/server/*.java" />
				<include name="**/dao/impl/externalsystem/*.java" />
				<include name="**/dao/impl/orm/*.java" />
				<include name="**/dao/*.java" />
			</fileset>
		</copy>

		<copy todir="${dir.src.custom.beans}" overwrite="yes" failonerror="true">
			<fileset dir="${dir.custom.framework.src}">
				<include name="**/evs/domain/*.java" />
			</fileset>
		</copy>
		
		<!-- FIX. Workaround to get the handler system in the correct location for war deployments -->
		<mkdir dir="${dir.output.project.classes}/conf/svr_1" />
		<copy todir="${dir.output.project.classes}/conf/svr_1" overwrite="yes" failonerror="true">
			<fileset dir="${dir.custom.conf}/svr_1" />
		</copy>
	</target>
	
	<target name="-copy-custom-lib.custom" if="copy-custom-lib.custom.use" >
		<copy todir="${dir.lib}" overwrite="yes" failonerror="true">
			<fileset dir="${dir.custom.lib}" />
		</copy>		
	</target>

	<target name="-copy-control-files.custom" if="copy-control-files.custom.use">
		<SDKecho message="Copying caCORE configuration files to SDK output" />
		<copy todir="${dir.output.project}" overwrite="true">
			<fileset dir="${dir.custom}">
				<include name="${dir.conf}/**/*" />
			</fileset>
		</copy>
		<antcall target="replace-cacore-tokens-in-files" />
	</target>

	<target name="-clean-all.custom" if="clean-all.custom.use">
		<echo> Cleaning custom libs in ${dir.lib}</echo>
		<delete file="${dir.lib}/lb*.jar" />
		<delete file="${dir.lib}/dtsrpc*.jar" />
		<delete file="${dir.lib}/lex*.jar" />
		<delete file="${dir.lib}/MSSOU*.jar" />
	</target>

	<target name="replace-cacore-tokens-in-files">
		<SDKecho message="Replacing tokens in configuration files" />
		<replace dir="${dir.output.conf}">
			<replacefilter token="@EXTERNALSERVER@" value="${external_server_name}" />
			<replacefilter token="@EVSDTSRPCSERVER@" value="${evs_dtsrpc_server}" />
			<replacefilter token="@EVSDTSRPCPORT@" value="${evs_dtsrpc_port}" />
			<replacefilter token="@EVSMETAPHRASESERVER@" value="${evs_metaphrase_server}" />
			<replacefilter token="@EVSMETAPHRASEDATABASE@" value="${evs_metaphrase_database}" />
			<replacefilter token="@EVSMETAPHRASEUSERNAME@" value="${evs_metaphrase_username}" />
			<replacefilter token="@EVSMETAPHRASEPASSWORD@" value="${evs_metaphrase_password}" />
			<replacefilter token="@WEB_SERVER_NAME@" value="${web_server_name}" />
			<replacefilter token="@WEB_SERVER_PORT@" value="${web_server_port}" />
			<replacefilter token="@EVS_MODEL@" value="${dir.model}/${fixed_evs_model_filename}" />
			<replacefilter token="@EVSPROPERTIESFILE@" value="evsBeans.properties" />
			<replacefilter token="@EVSDAOCLASS@" value="${evs_dao_class}" />
			<replacefilter token="@INDEXBASE@" value="${index_base}" />
			<replacefilter token="@SHOWSQL@" value="${show_sql}" />
		</replace>
	</target>

	<target name="-copy-custom-beans.custom" if="copy-custom-beans.custom.use">
		<copy todir="${dir.output.project.src}" overwrite="yes" failonerror="false">
			<fileset dir="${dir.custom.beans}"/>
		</copy>
	</target>
		
	<target name="-copy-custom-orm.custom" if="copy-custom-orm.custom.use" depends="-init-project.custom">
		<copy todir="${dir.output.conf}" overwrite="yes" failonerror="false">
			<fileset dir="${dir.src.custom.orm}">
				<include name="${file.orm.properties}" />
				<include name="${file.dao.configuration}" />
				<include name="${file.orm.configuration}" />
				<include name="${file.orm2.configuration}" />
			</fileset>
		</copy>
		<copy todir="${dir.output.project.src}" overwrite="yes" failonerror="true">
			<fileset dir="${dir.custom.orm}" />
		</copy>		
	</target>
	
	<target name="-copy-framework.custom" if="copy-framework.custom.use" depends="-init-project.custom">
		<copy todir="${dir.output.project.src}" overwrite="yes" failonerror="false">
			<fileset dir="${dir.custom.framework.src}">
				<include name="**/common/util/*.java" />
				<include name="**/system/applicationservice/impl/*.java" />
				<include name="**/system/applicationservice/*.java" />
				<include name="**/comm/**/*.java" />
				<include name="**/dao/**/*.java" />
				<include name="**/delegator/*.java" />
				<include name="**/dao/**/*.java" />
				<include name="**/proxy/**/*.java" />
				<include name="**/webservice/**/*.java" />
				<include name="**/evs/service/*.java" />
			</fileset>
            <fileset dir="${dir.output.project}/conf/spring" 
                    includes="evsApplicationService.xml"/>
		</copy>
		<!-- The SDK puts the conf generated files in 'src'(?) Copying from conf to src for proper packaging -->
		<copy todir="${dir.output.project.src}" overwrite="yes" failonerror="false">
			<fileset dir="${dir.output.conf}" includes="*.xml"/>
		</copy>
		<copy todir="${dir.output.project.web}" overwrite="true">
			<fileset dir="${dir.custom.conf}" includes="**/*"/>
		</copy>
	</target>
	
	<target name="-copy-template-files.custom" if="copy-template-files.custom.use">
		<copy todir="${dir.output.project.templates}">
			<fileset dir="${dir.custom.conf}">
				<include name="*.javajet" />
			</fileset>
			<fileset dir="${dir.custom.conf}">
				<include name="*.skeleton" />
			</fileset>
		</copy>
	</target>

	<target name="-fix-xmi.custom" if="fix-xmi.custom.use">
		<SDKecho message="Pre-processing XMI files" />
		<java classname="gov.nih.nci.codegen.core.util.FixXMI" fork="true">
			<classpath refid="classpath"/>
			<jvmarg value="-Xmx512m"/>
			<arg value="${xmi_preprocessor}"/>
			<arg value="${dir.custom.model}/${model_filename}"/>
			<arg value="${dir.model}/${fixed_filename}"/>
		</java>
		<java classname="gov.nih.nci.codegen.core.util.FixXMI" fork="true">
			<classpath refid="classpath" />
			<jvmarg value="-Xmx512m" />
			<arg value="${xmi_preprocessor}" />
			<arg value="${dir.custom.model}/${evs_model_filename}" />
			<arg value="${dir.model}/${fixed_evs_model_filename}" />
		</java>
	</target>

	<!--***********************************************************************
		*** COMPILE AND PACKAGE GENERATED APPLICATION 
		*********************************************************************** -->
	<target name="-generate-system.custom" if="generate-system.custom.use" />
	<target name="-generate-cache.custom" if="generate-cache.custom.use" />
	<target name="-generate-templates.custom" if="generate-templates.custom.use" />
	<target name="-generate-common-role-util.custom" if="generate-common-role-util.custom.use" />
	<target name="-generate-dao-conf.custom" if="generate-dao-conf.custom.use" />
	<target name="-generate-junit.custom" if="generate-junit.custom.use" />
	<target name="-generate-OR-mapping.custom" if="generate-OR-mapping.custom.use" />
	<target name="-generate-orm-conf.custom" if="generate-orm-conf.custom.use" />
	<target name="-build-artifacts.custom" if="build-artifacts.custom.use" />
	<target name="-build-beans.custom" if="build-beans.custom.use" />
	<target name="-build-framework.custom" if="build-framework.custom.use" />
	<target name="-build-orm.custom" if="build-orm.custom.use" />
	<target name="-build-schema.custom" if="build-schema.custom.use" />
	<target name="-build-system.custom" if="build-system.custom.use" />
	<target name="-compile-beans.custom" if="compile-beans.custom.use" />
	<target name="-package-client-jar.custom" if="package-client-jar.custom.use" />
	<target name="-package-thickclient-resources.custom" if="package-thickclient-resources.custom.use" >
		<copy todir="${dir.output.project.package.thickclient}/conf" overwrite="true">
				<fileset dir="${dir.output.project.src}">
				     <include name="evsApplicationService.xml"/>
				</fileset>
				</copy>
				<copy tofile="${dir.output.project.package.thickclient}/conf/evsService.xml" file="${dir.output.conf.spring}/evsServiceThickClient.xml" overwrite="true"/>		
	</target>
	<target name="-package-war.custom" if="package-war.custom.use" />
	<target name="-generate-xml-mapping.custom" if="generate-xml-mapping.custom.use"/>
	
	<target name="-generate-common-package-util.custom" if="generate-common-package-util.custom.use">
		<SDKecho message="Generating evs package utilities" />
		<SDKgenerate controlfile="${dir.output.conf.control}/${file.control.evsPackageUtil}" />
	</target>

	<target name="-generate-schemas.custom" if="generate-schemas.custom.use">
			<SDKecho message="Generating EVS XML schemas"/>
			<SDKgenerate controlfile="${dir.output.conf.control}/${file.control.evs_schemageneration}"/>		
	</target>
	
	<target name="-compile-generator.custom" if="compile-generator.custom.use"
			description="Compile cacORE code generation classes">
			<SDKecho message="Compiling caCORE code generator"/>
			<javac destdir="${dir.codegen.temp.build}" debug="${sdk.debug}">
				<src path="${dir.output.project.src}"/>
				<include name="gov/nih/nci/codegen/**/*.java"/>
				<classpath refid="classpath"/>
			</javac>
	</target>
	
	<target name="-generate-wsdd.custom" if="generate-wsdd.custom.use">
		<SDKecho message="Generating WSDD file" />
		<!-- SDK does not add the class path to the generated output artifacts.  
		Adding a workaround to copy the evsBeans.properity to the location in the classpath -->
		<copy todir="${dir.output.conf}/resources/server" overwrite="yes" failonerror="false">
			<fileset dir="${dir.output.project.src}">
				<include name="evsBeans.properties" />
			</fileset>
		</copy>
		<SDKgenerate controlfile="${dir.output.conf.control}/${file.control.corewsdd}" />
	</target>
	
	<target name="-generate-beans.custom" if="generate-beans.custom.use">
		<SDKgenerate controlfile="${dir.output.conf.control}/${file.control.beanevsgeneration}" />
		<SDKgenerate controlfile="${dir.output.conf.control}/${file.control.beanevswsgeneration}" />
		<antcall target="generate-index-properties"/>
	</target>
	<!-- generate index properties file -->
	<target name="generate-index-properties">
		<SDKecho message="Generating index properties file"/>
		<SDKgenerate controlfile="${dir.output.conf.control}/${file.control.coreindexutil}"/>		
	</target>	
	<!-- generate indexes -->
	<target name="generate-index" if="generate_index_yes">	
	<SDKecho message="Generating indexes"/>
		<mkdir dir="${index_base}" />
		<java classname="gov.nih.nci.common.util.search.IndexGenerator" fork="true" maxmemory="1024m">
			<classpath refid="classpath"/>
			<classpath>
				<pathelement location="${dir.output.project.src}" />
			</classpath>			
			<arg value="${file.control.coreindexutil}" />
			
		</java>
	</target>
	<!--  package index generator -->
		<target name="package-index-generator" >
			<SDKecho message="Packaging index generator jar file"/>			
			<mkdir dir="${cacore_home}/output/indexGenerator" />
			<mkdir dir="${cacore_home}/output/indexGenerator/conf" />
			<mkdir dir="${cacore_home}/output/indexGenerator/lib" />
			<copy tofile="${cacore_home}/output/indexGenerator/build.xml" file="${dir.custom}/demo/build_index.xml" overwrite="true"/>
			
			<delete file="${cacore_home}/output/indexGenerator/lib/${project_name}-indexgen.jar"/>
			
			<jar destfile="${cacore_home}/output/indexGenerator/lib/${project_name}-indexgen.jar" update="false">
				<manifest>
					<attribute name="Generated-By" value="caCORE SDK Code Generator"/>
					<attribute name="Project-Title" value="${project_name}"/>
					<attribute name="Model-File" value="${model_filename}"/>
					<attribute name="Main-class" value="gov.nih.nci.common.util.search.IndexGenerator"/>
				</manifest>
				<fileset dir="${dir.output.project.classes}">
					<include name="**/search/**/*"/>
					<exclude name="**/applicationservice/impl/**/*"/>
					<exclude name="**/webservice/*"/>
					<exclude name="**/proxy/*"/>
					<exclude name="**/dao/impl/**/*"/>
					<exclude name="**/comm/server/*"/>
					<exclude name="**/mgmt/**/*"/>
					<include name="**/*"/>
				</fileset>	
				<fileset dir="${dir.output.project.src}">
					<include name="**/**/*.hbm.xml"/>
				</fileset>				
			</jar>
		
			<copy todir="${cacore_home}/output/indexGenerator/conf" overwrite="true">
					<fileset dir="${dir.output.project.src}">
					<include name="indexedFields.properties"/>
					<include name="hibernate.properties"/>
					<include name="searchapiconfig.properties"/>
					<include name="*.cfg.xml"/>								
				</fileset>
				<fileset dir="${dir.output.conf.resources.client}" includes="${file.logger.properties}"/>
			</copy>
			<copy todir="${cacore_home}/output/indexGenerator/lib" overwrite="true">
				<fileset dir="${dir.lib}">
					<include name="antlr*.jar"/>
					<include name="log4j*.jar"/>
					<include name="commons-logging*.jar"/>					
					<include name="dom4j*.jar"/>					
					<include name="asm*.jar"/>
					<include name="cglib*.jar"/>
					<include name="commons-*.jar"/>
					<include name="ehcache*.jar"/>
					<include name="jta.jar"/>
					<include name="ojdbc*.jar"/>
					
				</fileset>
				<fileset dir="${dir.custom.lib}">
					<include name="hibernate*.jar"/>
					<include name="ejb*.jar"/>	
					<include name="lucene*.jar"/>
				</fileset>
			</copy>
			<!--   war     -->
			<zip destfile="${cacore_home}/output/indexgen.zip">
				<zipfileset dir="${cacore_home}/output/indexGenerator" prefix="indexGenerator">
							<include name="**/*"/>							
						</zipfileset>
				</zip>
		</target>
	<!-- client package -->
	<target name="-package-client-resources.custom" if="package-client-resources.custom.use">
		<SDKecho message="Packaging caCORE client resources"/>
		<copy todir="${dir.output.project.package.client}/lib">
			<fileset dir="${dir.lib}">
				<!-- used for the lexbig distributed client -->
				<include name="lbImpl.jar"/>
				<include name="lbInterfaces.jar"/>
				<include name="lbMessage.jar"/>
				<include name="lbModel.jar"/>
				<include name="lbPatch.jar"/>
				<include name="lgModel.jar"/>
				<include name="lgUtility.jar"/>
			</fileset>
		</copy>
		<copy todir="${dir.output.project.package.client}/conf" overwrite="true">
			<fileset dir="${dir.output.conf.spring}" includes="evsService.xml"/>
		</copy>
	</target>
	
	<target name="-package-client.custom" if="package-client.custom.use">
		<SDKecho message="Packaging caCORE client resources" />
		
		<!-- workaround to ensure the EVS beans are generated and compiled.  The SDK version only depends
		     on XMI, not EVS code.  The build order is wrong. -->
		<SDKecho message="Generating caCORE XML mapping files"/>
		<SDKgenerate controlfile="${dir.output.conf.control}/${file.control.xmlmappinggeneration_cacore}"/>
		<SDKecho message="Generating caCORE Unmarshaller XML mapping file"/>
		<SDKgenerate controlfile="${dir.output.conf.control}/${file.control.xmlunmarshallermappinggeneration_cacore}"/>
		
		<jar destfile="${dir.output.project.package.client}/lib/${project_name}-client.jar" update="true">
					<fileset dir="${dir.output.project.src}">
						<include name="xml-mapping.xml"/>
					</fileset>
	    </jar>
		
		<!-- Delete caCORE SDK's client programs-->
		<delete dir="${dir.output.project.package.client}" includes="**/*.java"/>
		
		<!-- First, create test client files with current project information -->
		<copy todir="${dir.output.project.package.client}" overwrite="true">
			<fileset dir="${dir.custom.demo}">
				<exclude name="build_client.xml" />
			</fileset>
			<filterset>
				<filter token="WEB_SERVER_NAME" value="${web_server_name}" />
				<filter token="WEB_SERVER_PORT" value="${web_server_port}" />
				<filter token="PROJECT_NAME" value="${project_name}" />
				<filter token="SCHEMA_DIR" value="${basedir.unix}/${dir.output.project.xmlschema}" />
				<filter token="CLIENT_DIR" value="${basedir.unix}/${dir.output.project.package.client}" />
				<filter token="WEBSERVICENAME" value="${webservice_name}" />
			</filterset>
		</copy>
		<copy file="${dir.custom.demo}/build_client.xml" tofile="${dir.output.project.package.client}/build.xml" overwrite="true">
			<filterset>
				<filter token="AXIS_SERVICE" value="-l${url.project.axisservice}" />
			</filterset>
		</copy>
		<!-- Compile test programs -->
		<javac srcdir="${dir.output.project.package.client}" destdir="${dir.output.project.package.client}" classpathref="classpath" debug="${sdk.debug}" debuglevel="lines,vars,source"/>		
		
		<!-- Create ZIP file with client jar and all necessary libs/conf -->
			<zip destfile="${dir.output.project.package}/${file.project.client.zip}">
				<zipfileset dir="${dir.output.project.package.client}"/>
			</zip>
	</target>

	<!-- thickclient package -->
	<target name="-package-thickclient.custom" if="package-thickclient.custom.use">
		<SDKecho message="Packaging caCORE thickclient resources" />
		<!-- First, create test client files with current project information -->
		<copy todir="${dir.output.project.package.thickclient}" overwrite="true">
			<fileset dir="${dir.custom.demo}">
				<exclude name="build_client.xml" />
			</fileset>
			<filterset>
				<filter token="WEB_SERVER_NAME" value="${web_server_name}" />
				<filter token="WEB_SERVER_PORT" value="${web_server_port}" />
				<filter token="PROJECT_NAME" value="${project_name}" />
				<filter token="SCHEMA_DIR" value="${basedir.unix}/${dir.output.project.xmlschema}" />
				<filter token="CLIENT_DIR" value="${basedir.unix}/${dir.output.project.package.client}" />
				<filter token="WEBSERVICENAME" value="${webservice_name}" />
			</filterset>
		</copy>
		<copy file="${dir.custom.demo}/build_client.xml" tofile="${dir.output.project.package.client}/build.xml" overwrite="true">
			<filterset>
				<filter token="AXIS_SERVICE" value="-l${url.project.axisservice}" />
			</filterset>
		</copy>
	</target>
	
	<target name="-package-system.custom" if="package-system.custom.use">
		<delete dir="${cacore_home}/output" />
		<mkdir dir="${cacore_home}/output" />
		<copy todir="${cacore_home}/output" overwrite="true">
			<fileset dir="${dir.output.project.package}" />
		</copy>
		<antcall target="package-index-generator"/>
		<!--
			<antcall target="generate-index"/>
		-->
	</target>
	
	<target name="-rundemo.custom" if="rundemo.custom.use" />
	<target name="-runtest.custom" if="runtest.custom.use" />
	<target name="-runXMLdemo.custom" if="runXMLdemo.custom.use" />
	<target name="-runWSdemo.custom" if="runWSdemo.custom.use" />
	<target name="-undeployWS.custom" if="undeployWS.custom.use" />
	<target name="-compile-source.custom" if="compile-source.custom.use" />
	<target name="-deploy-server.custom" if="deploy-server.custom.use" />
	<target name="-deployWS.custom" if="deployWS.custom.use" />
	
	<!--***********************************************************************
		*** THE APPLICATION DEPLOYMENT TARGETS
		*********************************************************************** -->
	<target name="-copy-server-file.custom" if="copy-server-file.custom.use" />
	
	<!--***********************************************************************
		*** DOCUMENTATION TASK
		*********************************************************************** -->
	<target name="-doc.custom" if="doc.custom.use" />
	<target name="-doc-framework.custom" if="doc-framework.custom.use" />
	
	<!--***********************************************************************
		*** CREATE caCORE DISTRIBUTION PACKAGE
		*********************************************************************** -->
		<target name="package-cacore"
			description="Creates a distribution of the caCORE API">
			<SDKecho message="Creating caCORE distribution package"/>
			<delete file="${dir.output.project.package}/${project_name}_SOURCE.zip" quiet="true"/>
			
			<zip destfile="${dir.output.project.package}/${project_name}_SOURCE.zip">
				<zipfileset dir="${basedir}" prefix="cacore">
					<include name="conf/**/*"/>
					<include name="lib/**/*"/>
					<include name="models/**/caC*"/>
					<include name="src/**/*"/>
					<include name="${dir.output.project}/src/**/domain/**"/>
					<include name="*.xml"/>
					<include name="*.properties"/>
					<include name="*.txt"/>
					<exclude name="**/CVS/**"/>
				</zipfileset>
			</zip>
		</target>
	
</project>