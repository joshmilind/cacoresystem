<?xml version="1.0" encoding="UTF-8"?>
<project name="caCORESDKCustom">

	
	<condition property="fix-xmi-yes-custom">
		<and>
			<istrue value="${fix-xmi-yes}"/>
			<istrue value="${fix-xmi.custom.use}"/>
		</and>
	</condition>
	
	
	<target name="-build-artifacts.custom" if="build-artifacts.custom.use"/>
	<target name="-build-beans.custom" if="build-beans.custom.use"/>
	<target name="-build-framework.custom" if="build-framework.custom.use"/>
	<target name="-build-orm.custom" if="build-orm.custom.use"/>
	<target name="-build-schema.custom" if="build-schema.custom.use"/>
	<target name="-build-system.custom" if="build-system.custom.use"/>
	<target name="-clean.custom" if="clean.custom.use"/>
	<target name="-clean-all.custom" if="clean-all.custom.use"/>
	<target name="-clean-generator.custom" if="clean-framework.custom.use"/>
	<target name="-compile-beans.custom" if="compile-beans.custom.use"/>
	<target name="-compile-framework.custom" if="compile-framework.custom.use">
		<SDKecho message="Compiling application framework"/>
		<copy todir="${dir.output.project.framework.src}">
			<fileset dir="${dir.output.project.src}"/>
		</copy>
		<javac destdir="${dir.output.project.framework.build}">
			<src path="${dir.output.project.framework.src}"/>
			<!--src path="${dir.output.project.src}"/-->
			<classpath refid="classpath"/>
		</javac>
	</target>	
	<target name="-compile-generator.custom" if="compile-generator.custom.use"/>
	<target name="-compile-templates.custom" if="compile-templates.custom.use">
		<jetc template="${dir.output.project.templates}/BeanEVSImpl.javajet" destdir="${dir.output.project.src}"/>
		<jetc template="${dir.output.project.templates}/BeanEVSWS.javajet" destdir="${dir.output.project.src}"/>
		<javac srcdir="${dir.output.project.src}" destdir="${dir.output.project.build}">
			<classpath refid="classpath"/>
		</javac>
	</target>

	<target name="-copy-custom-wsdd.custom" if="copy-custom-wsdd.custom.use" depends="-init-project.custom">
		<SDKecho message="inside of copy-customwsdd.custom."/>
				<copy todir="${dir.output.project.web-inf}" overwrite="yes" failonerror="false">
					<fileset dir="${dir.src.custom.wsdd}">
						<include name="${file.server.config.wsdd}"/>
					</fileset>
				</copy>
	</target>

	<target name="-copy-custom-beans.custom" if="copy-custom-beans.custom.use" depends="-init-project.custom">
	<SDKecho message="inside of copy-custombeans.custom."/>
			<copy todir="${dir.output.project.src}" overwrite="yes" failonerror="false">
				<fileset dir="${dir.src.custom.beans}">					
				    <include name="**/evs/query/*.java"/>					
				</fileset>
			</copy>
	</target>
	<target name="-copy-custom-orm.custom" if="copy-custom-orm.custom.use" depends="-init-project.custom">
	<SDKecho message="inside of copy-custom-orm.custom."/>
		<copy todir="${dir.output.project.conf}" overwrite="yes" failonerror="false">
			<fileset dir="${dir.src.custom.orm}">
				<include name="${file.orm.properties}"/>
				<include name="${file.dao.configuration}"/>
				<include name="${file.orm.configuration}"/>
				<include name="${file.orm2.configuration}"/>
			</fileset>
		</copy>
	</target>
	<target name="-copy-project-framework.custom" if="copy-project-framework.custom.use" depends="-init-project.custom">
		<copy todir="${dir.output.project.framework.src}" overwrite="yes" failonerror="false">
			<fileset dir="${dir.custom.framework.src}">
				<include name="**/common/util/*.java"/>
				<include name="**/system/applicationservice/impl/*.java"/>
				<include name="**/system/applicationservice/*.java"/>
				<include name="**/comm/**/*.java"/>
				<include name="**/dao/**/*.java"/>
				<include name="**/delegator/*.java"/>
				<include name="**/dao/**/*.java"/>
				<include name="**/proxy/**/*.java"/>
				<include name="**/webservice/**/*.java"/>
				<include name="**/evs/service/*.java"/>
				<include name="**/codegen/**/*.java"/>				
			</fileset>
		</copy>
	</target>
	<target name="-copy-server-file.custom" if="copy-server-file.custom.use"/>
	<target name="-copy-template-files.custom" if="copy-template-files.custom.use">
		<copy todir="${dir.output.project.templates}">
			<fileset dir="${dir.custom.conf}">
				<include name="*.javajet"/>
			</fileset>
			<fileset dir="${dir.custom.conf}">
				<include name="*.skeleton"/>
			</fileset>
		</copy>
	</target>
	<target name="-create-control-files.custom" if="create-control-files.custom.use">
		<SDKcreatecontrol outputdir="${dir.output.project.src}">
			<controlfileset>
				<fileset dir="${dir.custom.conf}">
					<include name="${file.control.beanevsgeneration}"/>
					<include name="${file.control.beanevswsgeneration}"/>
					<include name="${file.control.evsPackageUtil}"/>
				</fileset>
			</controlfileset>
			<extendedfilterset>
		        <filter token="EVS_MODEL" value="${dir.model}/${fixed_evs_model_filename}"/>				
			</extendedfilterset>
		</SDKcreatecontrol>
		
		<SDKcreatecontrol outputdir="${dir.output.project.conf}">
					<controlfileset>
						<fileset dir="${dir.custom.conf}">
							<include name="${file.control.evsPackageUtil}"/>
						</fileset>
					</controlfileset>
					<extendedfilterset>
				        <filter token="EVS_MODEL" value="${dir.model}/${fixed_evs_model_filename}"/>				
					</extendedfilterset>
				</SDKcreatecontrol>
			
		<SDKcreatecontrol outputdir="${dir.output.project.conf}">
			<controlfileset>
				<fileset dir="${dir.custom.conf}">
					<include name="${file.control.corewsdd}"/>
				</fileset>
			</controlfileset>
			<extendedfilterset>
				<!-- The generator that uses this control file looks for the following file on the 
					 classpath, which includes the project's conf directory where the evsBeans file
					 is located.  -->
				<filter token="EVSPROPERTIESFILE" value="evsBeans.properties"/>
			</extendedfilterset>
		</SDKcreatecontrol>
	</target>
	<target name="-create-output-dirs.custom" if="create-output-dirs.custom.use">
	</target>
	<target name="-create-project-dirs.custom" if="create-project-dirs.custom.use"/>
	<target name="-deploy-server.custom" if="deploy-server.custom.use"/>
	<target name="-deployWS.custom" if="deployWS.custom.use"/>
	<target name="-disable-writable-api.custom" if="disable-writable-api-yes,disable-writable-api.custom.use"/>
	<target name="-doc.custom" if="doc.custom.use"/>
	<target name="-doc-framework.custom" if="doc-framework.custom.use"/>
	<target name="-fix-xmi.custom" if="fix-xmi-yes-custom">
		<SDKecho message="Pre-processing XMI files"/>
		<java classname="gov.nih.nci.codegen.core.util.FixXMI" fork="true">
			<classpath refid="classpath"/>
			<jvmarg value="-Xmx512m"/>
			<arg value="${xmi_preprocessor}"/>
			<arg value="${dir.custom.model}/${model_filename}"/>
			<arg value="${dir.model}/${fixed_filename}"/>
		</java>		
		<java classname="gov.nih.nci.codegen.core.util.FixXMI" fork="true">
			<classpath refid="classpath"/>
			<jvmarg value="-Xmx512m"/>
			<arg value="${xmi_preprocessor}"/>
			<arg value="${dir.custom.model}/${evs_model_filename}"/>
			<arg value="${dir.model}/${fixed_evs_model_filename}"/>
		</java>		
	</target>
	<target name="-format.custom" if="format.custom.use"/>
	<target name="-generate-artifacts.custom" if="generate-artifacts.custom.use"/>
	<target name="-generate-beans.custom" if="generate-beans.custom.use">
		<SDKgenerate controlfile="${dir.output.project.conf}/${file.control.beanevsgeneration}"/>
		<SDKgenerate controlfile="${dir.output.project.conf}/${file.control.beanevswsgeneration}"/>
	</target>
	<target name="-generate-cache.custom" if="generate-cache.custom.use"/>
	<target name="-generate-common-package-util.custom" if="generate-common-package-util.custom.use">
		<SDKecho message="Generating evs package utilities"/>
		<SDKgenerate controlfile="${dir.output.project.conf}/${file.control.evsPackageUtil}"/>
	</target>
	<target name="-generate-common-role-util.custom" if="generate-common-role-util.custom.use"/>
	<target name="-generate-dao-conf.custom" if="generate-dao-conf.custom.use"/>
	<target name="-generate-junit.custom" if="generate-junit.custom.use"/>
	<target name="-generate-OR-mapping.custom" if="generate-OR-mapping.custom.use"/>
	<target name="-generate-orm-conf.custom" if="generate-orm-conf.custom.use"/>
	<target name="-generate-schemas.custom" if="generate-schemas.custom.use"/>
	<target name="-generate-wsdd.custom" if="generate-wsdd.custom.use"/>
	<target name="-generate-xml-mapping.custom" if="generate-xml-mapping.custom.use"/>
	<target name="-init-project.custom" if="init-project.custom.use">
		<SDKecho message="Copying files required by caCORE API to SDK directory"/>
		<copy todir="${dir.model}" overwrite="no" failonerror="false">
			<fileset dir="${dir.custom.model}">
				<include name="${fixed_filename}"/>
				<include name="${fixed_evs_model_filename}"/>
			</fileset>
		</copy>
		<copy todir="${dir.src.custom.wsdd}" overwrite="yes" failonerror="false">
			<fileset dir="${dir.custom.wsdd}">
				<include name="${file.server.config.wsdd}"/>
			</fileset>
		</copy>
		<copy todir="${dir.src.custom.beans}" overwrite="yes" failonerror="false">
			<fileset dir="${dir.custom.beans}">
				<include name="**/evs/domain/*.java"/>
				<include name="**/evs/query/*.java"/>
				<include name="**/evs/domain/ws/*.java"/>
				<include name="**/evs/service/*.java"/>
				<include name="**/*.java"/>
			</fileset>
		</copy>
		<copy todir="${dir.src.custom.framework}" overwrite="yes" failonerror="false">
			<fileset dir="${dir.custom.beans}">
				<include name="**/common/util/*.java"/>
				<include name="**/system/applicationservice/impl/*.java"/>
				<include name="**/system/applicationservice/*.java"/>
				<include name="**/comm/common/*.java"/>
				<include name="**/comm/server/*.java"/>
				<include name="**/dao/impl/externalsystem/*.java"/>
				<include name="**/dao/impl/orm/*.java"/>
			   	<include name="**/dao/*.java"/>
			</fileset>
		</copy>

		<copy todir="${dir.src.custom.orm}" overwrite="yes" failonerror="true">
			<fileset dir="${dir.custom.orm}"/>
		</copy>
		<copy todir="${dir.src.custom.beans}" overwrite="yes" failonerror="true">
			<fileset dir="${dir.custom.beans}">
				<include name="**/evs/domain/*.java" />
			</fileset>
		</copy>
		<copy todir="${dir.src.custom.orm}" overwrite="yes" failonerror="true">
			<fileset dir="${dir.custom.conf}">
				<include name="${file.orm.configuration}"/>
				<include name="${file.orm2.configuration}"/>
				<include name="${file.orm.properties}"/>
				<include name="${file.dao.configuration}"/>
			</fileset>
		</copy>
		<copy todir="${dir.output.project.conf}" overwrite="yes" failonerror="true">
			<fileset dir="${dir.custom.conf}">
				<include name="evsBeans.properties"/>
			</fileset>
			<fileset dir="${dir.custom.conf}/xslt">
				<include name="evsFormat.xsl"/>
				<include name="cacoreFormat.xsl"/>
			</fileset>
			<filterset>
		        <filter token="XSLT_PATH" value="${project_name}"/>
			</filterset>				
		</copy>
		<copy todir="${dir.lib}" overwrite="yes" failonerror="true">
			<fileset dir="${dir.custom.lib}"/>
		</copy>
	</target>
	
	<target name="-package-client.custom" if="package-client.custom.use">
		<!-- First, create test client files with current project information -->
		<copy todir="${dir.output.project.client}" overwrite="true">
			<fileset dir="${dir.custom.demo}">
				<exclude name="build_client.xml"/>
			</fileset>
			<filterset>
				<filter token="WEB_SERVER_NAME" value="${web_server_name}"/>
				<filter token="WEB_SERVER_PORT" value="${web_server_port}"/>
				<filter token="PROJECT_NAME" value="${project_name}"/>
				<filter token="SCHEMA_DIR" value="${basedir.unix}/${dir.output.project.xmlschema}"/>
				<filter token="CLIENT_DIR" value="${basedir.unix}/${dir.output.project.package.client}"/>
				<filter token="WEBSERVICENAME" value="${webservice_name}"/>
			</filterset>
		</copy>
		<copy file="${dir.custom.demo}/build_client.xml" tofile="${dir.output.project.client}/build.xml" overwrite="true">
			<filterset>
				<filter token="AXIS_SERVICE" value="-l${url.project.axisservice}"/>
			</filterset>
		</copy>
		
		<!-- Create client jar file -->
		<mkdir dir="${dir.output.project.package.client.lib}"/>
		<jar destfile="${dir.output.project.package.client.lib}/${file.project.client.jar}" update="yes">
			<manifest>
				<attribute name="Generated-By" value="caCORE SDK Code Generator"/>
				<attribute name="Project-Title" value="${project_name}"/>
				<attribute name="Model-File" value="${model_filename}"/>
			</manifest>
			<fileset dir="${dir.output.project.framework.build}">
				<exclude name="gov/nih/nci/system/applicationservice/impl/**"/>
				<exclude name="gov/nih/nci/system/comm/server/**"/>
				<exclude name="gov/nih/nci/system/dao/**"/>
				<exclude name="gov/nih/nci/system/delegator/BaseDelegate.class"/>
				<exclude name="gov/nih/nci/system/proxy/LocalProxy.class"/>
				<exclude name="gov/nih/nci/system/proxy/HTTPQuery.class"/>
				<exclude name="gov/nih/nci/system/server/**"/>
				<exclude name="gov/nih/nci/system/servicelocator/**"/>
				<exclude name="gov/nih/nci/system/webservice/**"/>
				<exclude name="**/impl/test/*.class"/>
			</fileset>
			<fileset dir="${dir.generator.build}">
				<include name="gov/nih/nci/common/**"/>
			</fileset>
			<fileset dir="${dir.conf}">
				<include name="mapping.dtd"/>
				<include name="xml.properties"/>
			</fileset>
			<fileset dir="${dir.output.project.xmlmapping}">
				<include name="xml-mapping.xml"/>
			</fileset>
			<fileset dir="${dir.output.project.conf}">
				<include name="roleLookup.properties"/>
				<include name="cacoreBeans.properties"/>
				<include name="evsBeans.properties"/>
				<include name="CORESystem.properties"/>
				<include name="ehcache.xml"/>
			</fileset>
		</jar>

		<!-- Create ZIP file with client jar and all necessary libs/conf -->
		<zip destfile="${dir.output.project.package}/${file.project.client.zip}">
			<zipfileset dir="${dir.output.project.package.client.lib}" includes="${file.project.client.jar}" prefix="lib"/>
			<zipfileset dir="${dir.lib}" prefix="lib">
				<include name="axis.jar"/>
				<include name="saaj.jar"/>
				<include name="mail.jar"/>
				<include name="jaxrpc.jar"/>
				<include name="activation.jar"/>
				<include name="aspect*.jar"/>
				<include name="hibernate3.jar"/>
				<include name="log4j*.jar"/>
				<include name="commons-logging.jar"/>
				<include name="commons-discovery-0.2.jar"/>
				<include name="wsdl4j-1.5.1.jar"/>
				<include name="cglib-full*.jar"/>
				<include name="castor-0.9.9.jar"/>
				<include name="xercesImpl.jar"/>
				<include name="spring.jar"/>
				<include name="spring-richclient.jar"/>
				<include name="xml-apis.jar"/>
			</zipfileset>
			<zipfileset dir="${dir.custom.lib}" prefix="lib"/>
			<zipfileset dir="${dir.conf}" includes="client_log4j.properties" prefix="conf"/>
			<zipfileset dir="${dir.output.project.conf}" includes="${file.control.remoteservice}" prefix="conf"/>
			<zipfileset dir="${dir.custom.conf}" includes="ClientREADME.txt" fullpath="README.txt"/>
			<zipfileset dir="${dir.conf}" includes="xml.properties" prefix="lib"/>
			<zipfileset dir="${dir.conf}" includes="mapping.dtd" prefix="lib"/>
			<zipfileset dir="${dir.output.project.client}"/>
			<zipfileset dir="${dir.output.project.xmlschema}" prefix="lib">
				<include name="*.xsd"/>
			</zipfileset>
			<zipfileset dir="${dir.conf}" includes="client.log" prefix="log"/>
		</zip>

		<!-- Unpack ZIP file into package directory so it can be used for tests/demos -->
		<unzip src="${dir.output.project.package}/${file.project.client.zip}"
			dest="${dir.output.project.package.client}"/>
	
	</target>
	<target name="-package-framework.custom" if="package-framework.custom.use" />
	<target name="-package-server.custom" if="package-server.custom.use" depends="-generate-wsdd.cacore">
	<SDKecho message="Inside of -package-server.custom"/>
		<delete file="${dir.output.project.package.server}/${file.project.server.war}"/>
		<war destfile="${dir.output.project.package.server}/${file.project.server.war}"
			webxml="${dir.custom.conf}/web.xml" update="yes" duplicate="preserve">
			<lib dir="${dir.lib}">
				<exclude name="log4j-1.2.8.jar"/>
				<exclude name="commons-logging*.*"/>
				<exclude name="spring-richclient.jar"/>
			</lib>
			<zipfileset dir="${dir.conf}" prefix="log">
				<include name="server.log"/>
				<include name="client.log"/>
				<include name="hibernate.log"/>
			</zipfileset>
			<webinf dir="${dir.conf}">
				<include name="hibernate-configuration-3.0.dtd"/>
				<include name="hibernate-mapping-3.0.dtd"/>
				<include name="applicationContext.xml"/>
				<include name="httpinvoker-servlet.xml"/>
			</webinf>
			<webinf dir="${dir.custom.wsdd}">
				<include name="server-config.wsdd"/>			
			</webinf>
			<classes dir="${dir.output.project.framework.build}">
				<exclude name="gov/nih/nci/system/comm/client/ApplicationServiceClientImpl.class"/>
				<exclude name="gov/nih/nci/system/comm/client/ClientSession.class"/>			
			</classes>
			<classes dir="${dir.generator.build}">
				<include name="gov/nih/nci/common/**"/>
			</classes>
			<classes dir="${dir.output.project.build}">
				<exclude name="**/impl/test/*.class"/>
			</classes>
			<classes dir="${dir.output.project.orm}"/>
			<classes dir="${dir.output.project.conf}">
				<include name="${file.control.systemProperties}"/>
				<include name="roleLookup.properties"/>
				<include name="cacoreBeans.properties"/>
				<include name="evsBeans.properties"/>
				<include name="log4j.properties"/>
				<include name="applicationService.xml"/>
				<include name="orm2.cfg.xml"/>
				<include name="orm1.cfg.xml"/>
				<include name="${file.cache.properties}"/>
				<include name="${file.orm.properties}"/>
			</classes>
			<classes file="${dir.output.project.xmlmapping}/xml-mapping.xml" />
			<classes file="${dir.conf}/xml.properties"/>
			<classes file="${dir.output.project}/log4j.properties"/>
			<zipfileset dir="${dir.output.project.conf}" prefix="WEB-INF/conf">
				<include name="DAOConfig.xml"/>
				<!--
				<include name="log4j.properties"/>
				<include name="roleLookup.properties"/>
				<include name="cacoreBeans.properties"/>
				<include name="${file.cache.properties}"/>
				<include name="${file.orm.properties}"/>
				<include name="${file.orm.configuration}"/>
				<include name="${file.orm2.configuration}"/>
				-->
			</zipfileset>
			<zipfileset file="${dir.output.project}/log4j.properties" prefix="WEB-INF/conf"/>
			<fileset dir="${dir.conf}">
				<include name="Happy.jsp"/>
				<include name="Classes.jsp"/>
				<include name="Packages.jsp"/>
				<include name="Criteria.jsp"/>
				<include name="Result.jsp"/>
			</fileset>
		   	<fileset dir="${dir.conf.xslt}">
				<include name="**/**"/>
				<exclude name="*.xsl"/>
			</fileset>
			<zipfileset dir="${dir.custom.conf}/xslt/images" prefix="images">
				<include name="**/**"/>
			</zipfileset>
			<zipfileset dir="${dir.custom.wsdd}" prefix="wsdl">
							<include name="server-config.wsdd"/>
			</zipfileset>
			<zipfileset dir="${dir.output.project.conf}" prefix="WEB-INF/classes/xslt">
				<include name="*.xsl"/>
			</zipfileset>
			<zipfileset dir="${dir.custom.conf}/resources" prefix="WEB-INF/resources">
				<include name="**/**"/>
			</zipfileset>
						
		</war>
	</target>
	<target name="-package-system.custom" if="package-system.custom.use">
		<delete dir="${cacore_home}/output"/>
		<mkdir dir="${cacore_home}/output"/>
		<copy todir="${cacore_home}/output" overwrite="true">
			<fileset dir="${dir.output.project.package}"/>
		</copy>	
		<mkdir dir="${cacore_home}/output/client/log"/>
		<copy todir="${cacore_home}/output/client/log" overwrite="true">
			<fileset dir="${dir.output.project.conf}">
				<include name="client.log"/>
			</fileset>
		</copy>	
		
	</target>
	<target name="-rundemo.custom" if="rundemo.custom.use"/>
	<target name="-runtest.custom" if="runtest.custom.use"/>
	<target name="-runXMLdemo.custom" if="runXMLdemo.custom.use"/>
	<target name="-runWSdemo.custom" if="runWSdemo.custom.use"/>
	<target name="-undeployWS.custom" if="undeployWS.custom.use"/>
	
	<!--********************************************************************-->
	<!--          CUSTOM TARGETS                                            -->
	<!--********************************************************************-->
	<target name="-generate-wsdd.cacore">
		<SDKecho message="Generating WSDD file"/>
		<SDKgenerate controlfile="${dir.output.project.conf}/${file.control.corewsdd}"/>
	</target>	
	
</project>